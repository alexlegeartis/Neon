import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache, partial # Added partial for hook registration
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
# use of FlexAttention contributed by @KoszarskyB
from torch.nn.attention.flex_attention import BlockMask, flex_attention
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Muon optimizer

@torch.compile
def zeropower_via_newtonschulz5(G: Tensor, steps: int) -> Tensor:
    """
    Newton-Schulz iteration to compute the zeroth power / orthogonalization of G. We opt to use a
    quintic iteration whose coefficients are selected to maximize the slope at zero. For the purpose
    of minimizing steps, it turns out to be empirically effective to keep increasing the slope at
    zero even beyond the point where the iteration no longer converges all the way to one everywhere
    on the interval. This iteration therefore does not produce UV^T but rather something like US'V^T
    where S' is diagonal with S_{ii}' ~ Uniform(0.5, 1.5), which turns out not to hurt model
    performance at all relative to UV^T, where USV^T = G is the SVD.
    """
    assert G.ndim >= 2 # batched Muon implementation by @scottjmaddox, and put into practice in the record by @YouJiacheng
    a, b, c = (3.4445, -4.7750,  2.0315)
    X = G
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)
    # Perform the NS iterations
    for _ in range(steps):
        A = X @ X.mT
        B = b * A + c * A @ A # quintic computation strategy adapted from suggestion by @jxbz, @leloykun, and @YouJiacheng
        X = a * X + B @ X

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X
'''
import torch.utils.dlpack as thd
from cupyx.scipy.sparse.linalg import svds as cupyx_svds

def several_sv_svds_approximation(W_torch, k, num_iter=50):
    """SVD approximation using the top k singular values and corresponding vectors."""
    # Store original device and dtype
    original_device = W_torch.device
    original_dtype = W_torch.dtype
    
    W = cp.from_dlpack(thd.to_dlpack(W_torch)).astype(cp.float32)
    U, S, Vt = cupyx_svds(W, k=min([k, W.shape[0] - 1, W.shape[1] - 1]), maxiter=num_iter, which='LM')

    # Convert back to torch tensors and ensure they're on the correct device
    approx_torch_U = thd.from_dlpack(U.toDlpack()).to(device=original_device, dtype=original_dtype)
    approx_torch_S = thd.from_dlpack(S.toDlpack()).to(device=original_device, dtype=original_dtype)
    approx_torch_Vt = thd.from_dlpack(Vt.toDlpack()).to(device=original_device, dtype=original_dtype)
    
    return approx_torch_U, approx_torch_S, approx_torch_Vt

class NormNeon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_reduce_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    # v = zeropower_via_newtonschulz5(grad.bfloat16(), 5)
                    u, s, vt = several_sv_svds_approximation(grad.bfloat16(), 5)
                    p.add_(other=u@vt, alpha=-eff_lr)
                idx += 1
                all_reduce_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_reduce_futures).wait()
'''
class FastNormMuon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95, sgd_coeff=0):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum, sgd_coeff=sgd_coeff)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        self.sgd_coeff = sgd_coeff

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_reduce_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            sgd_coeff = group["sgd_coeff"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    # assume: grad is a Tensor, momentum_buffer exists, momentum, sgd_coeff, eps, eff_lr are defined
                    with torch.no_grad():
                        # inplace blend with momentum (keeps original semantic: grad becomes the lerped tensor)
                        grad.lerp_(momentum_buffer, momentum)

                        # compute zeropower part from the (post-lerp) grad, in bfloat16 to match the original code
                        if sgd_coeff != 1:
                            # create update_part in bfloat16 (may allocate once per call; unavoidable if zeropower expects bfloat16)
                            update_part = zeropower_via_newtonschulz5(grad.to(torch.bfloat16), 5)

                            # upcast update_part to grad dtype to do mixed-dtype blending without extra temporaries later
                            if update_part.dtype != grad.dtype:
                                update_part = update_part.to(grad.dtype)

                        # compute inverse norm scalar efficiently (no large temp tensors)
                        # - view(-1) is cheap (no copy)
                        # - dot(view, view) is a single reduction
                        norm_sq = grad.view(-1).dot(grad.view(-1))
                        inv_norm = (norm_sq + eps).rsqrt()  # stable rsqrt on the scalar

                        # normalize grad in-place (so we avoid allocating g_normalized)
                        grad.mul_(inv_norm)   # now grad == g_normalized (in-place)

                        # build final update (reuse update_part buffer if available)
                        if sgd_coeff != 1:
                            # update_part := (1 - sgd_coeff) * update_part + sgd_coeff * grad
                            # do it in-place on update_part to avoid creating another temp
                            update_part.mul_(1 - sgd_coeff)    # in-place scale
                            update_part.lerp_(grad, sgd_coeff) # in-place linear interpolation
                            update = update_part
                        else:
                            # if sgd_coeff == 1 we can use grad directly (already normalized in-place)
                            update = grad

                        # apply update (same as original)
                        p.add_(other=update, alpha=-eff_lr)
                    '''
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    eps = 1e-12
                    g_normalized = grad / (grad.norm() + eps)
                    if sgd_coeff != 1:
                        update_part = zeropower_via_newtonschulz5(grad.bfloat16(), 5)
                        update = (1 - sgd_coeff) * update_part + sgd_coeff * g_normalized
                    else:
                        update = sgd_coeff * g_normalized
                    p.add_(other=update, alpha=-eff_lr)
                    '''
                idx += 1
                all_reduce_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_reduce_futures).wait()

class NormMuon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95, sgd_coeff=0):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum, sgd_coeff=sgd_coeff)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        self.sgd_coeff = sgd_coeff

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_reduce_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            sgd_coeff = group["sgd_coeff"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    eps = 1e-12
                    g_normalized = grad / (grad.norm() + eps)
                    if sgd_coeff != 1:
                        update_part = zeropower_via_newtonschulz5(grad.bfloat16(), 5)
                        update = (1 - sgd_coeff) * update_part + sgd_coeff * g_normalized
                    else:
                        update = sgd_coeff * g_normalized
                    p.add_(other=update, alpha=-eff_lr)
                idx += 1
                all_reduce_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_reduce_futures).wait()
class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_reduce_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = zeropower_via_newtonschulz5(grad.bfloat16(), 5)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_reduce_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_reduce_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_reduce_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_reduce_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_reduce_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkv_w = nn.Parameter(torch.empty(3, hdim, dim).uniform_(-bound, bound))
        self.rotary = Rotary(head_dim, max_seq_len)
        self.c_proj = CastedLinear(hdim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, block_mask: BlockMask):
        B, T = x.size(0), x.size(1) # batch size, sequence length
        assert B == 1, "Must use batch size = 1 for FlexAttention"
        q, k, v = F.linear(x, self.qkv_w.flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v
        y = flex_attention(q.transpose(1, 2), k.transpose(1, 2), v.transpose(1, 2), block_mask=block_mask, scale=self.attn_scale).transpose(1, 2)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = self.c_proj(y)
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        self.c_fc = CastedLinear(dim, hdim)
        self.c_proj = CastedLinear(hdim, dim)
        self.c_proj.weight.detach().zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = self.c_fc(x)
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = self.c_proj(x)
        return x

class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor, block_mask: BlockMask):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, block_mask)
        x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=True, x_s=(model_dim**0.5)/448, w_s=24/448, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 27.5
        self.scalars.lr_mul = 5.0

    def create_blockmasks(self, input_seq: Tensor, sliding_window_num_blocks: Tensor):
        BLOCK_SIZE = 128
        docs = (input_seq == 50256).cumsum(0)

        def document_causal(b, h, q_idx, kv_idx):
            causal_mask = q_idx >= kv_idx
            document_mask = docs[q_idx] == docs[kv_idx]
            return causal_mask & document_mask

        def dense_to_ordered(dense_blockmask: Tensor):
            num_blocks = dense_blockmask.sum(dim=-1, dtype=torch.int32)
            indices = dense_blockmask.argsort(dim=-1, descending=False, stable=True).flip(-1).to(torch.int32)
            return num_blocks[None, None].contiguous(), indices[None, None].contiguous()

        # manual block mask creation by @YouJiacheng
        assert len(input_seq) % BLOCK_SIZE == 0
        NUM_BLOCKS = len(input_seq) // BLOCK_SIZE
        block_idx = torch.arange(NUM_BLOCKS, dtype=torch.int32, device="cuda")
        causal_blockmask_any = block_idx[:, None] >= block_idx
        causal_blockmask_all = block_idx[:, None] > block_idx
        docs_low = docs.view(-1, BLOCK_SIZE)[:, 0].contiguous()
        docs_high = docs.view(-1, BLOCK_SIZE)[:, -1].contiguous()
        document_blockmask_any = (docs_low[:, None] <= docs_high) & (docs_high[:, None] >= docs_low)
        document_blockmask_all = (docs_low[:, None] == docs_high) & (docs_high[:, None] == docs_low)
        blockmask_any = causal_blockmask_any & document_blockmask_any
        blockmask_all = causal_blockmask_all & document_blockmask_all
        partial_kv_num_blocks, partial_kv_indices = dense_to_ordered(blockmask_any & ~blockmask_all)
        full_kv_num_blocks, full_kv_indices = dense_to_ordered(blockmask_all)
        def build_bm(window_size_blocks: Tensor) -> BlockMask:
            return BlockMask.from_kv_blocks(
                torch.clamp_max(partial_kv_num_blocks, torch.clamp_min(window_size_blocks - full_kv_num_blocks, 1)),
                partial_kv_indices,
                torch.clamp_max(full_kv_num_blocks, window_size_blocks - 1),
                full_kv_indices,
                BLOCK_SIZE=BLOCK_SIZE,
                mask_mod=document_causal,
            )
        # Long-short SWA block masks by @leloykun & @YouJiacheng, adapated from suggestion by @Grad62304977, following Gemma 2 paper
        return build_bm(sliding_window_num_blocks), build_bm(sliding_window_num_blocks // 2)

    def forward(self, input_seq: Tensor, target_seq: Tensor, sliding_window_num_blocks: Tensor):
        assert input_seq.ndim == 1

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = self.create_blockmasks(input_seq, sliding_window_num_blocks)
        block_masks = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(block_masks) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)[None]) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], block_masks[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / (7.5 * x.size(-1)**0.5))
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq, reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

# find world_size starting indicies, such that each begins with token 50256 and local_batches don't overlap
def find_batch_starts(tokens: Tensor, pos: int, local_batch_size: int, max_batch_span: int):
    boundary_mask = tokens[pos : pos + max_batch_span] == 50256
    boundary_positions = torch.nonzero(boundary_mask, as_tuple=False).squeeze(-1) + pos
    start = boundary_positions[0].item()
    starts = []
    for i in range(1, len(boundary_positions)):
        end = boundary_positions[i].item() 
        if end - start >= local_batch_size:
            starts.append(start) # append start once end pos is confirmed
            if len(starts) == dist.get_world_size():
                return starts, end - pos
            start = end
    assert False # increase max_batch_span if necessary

def distributed_data_generator(filename_pattern: str, batch_size: int, align_to_bos: bool):
    rank = dist.get_rank()
    world_size = dist.get_world_size()
    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    assert batch_size % world_size == 0
    local_batch_size = batch_size // world_size
    file_iter = iter(files) # use itertools.cycle(files) instead if you want to do multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0
    max_batch_span = 2 * batch_size if align_to_bos else batch_size # provide buffer to handle samples up to length local_batch_size
    while True:
        if pos + max_batch_span + 1 >= len(tokens):
            tokens, pos = _load_data_shard(next(file_iter)), 0
        if align_to_bos:
            batch_starts, batch_span = find_batch_starts(tokens, pos, local_batch_size, max_batch_span)
            start_idx = batch_starts[rank]
        else:
            batch_span = batch_size
            start_idx = pos + rank * local_batch_size
        buf = tokens[start_idx:][:local_batch_size + 1]
        inputs = buf[:-1].to(device="cuda", dtype=torch.int32, non_blocking=True) # no sync on host side;
        targets = buf[1:].to(device="cuda", dtype=torch.int64, non_blocking=True) # H2D in another stream isn't helpful.
        pos += batch_span
        yield inputs, targets

# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_seq_len = 48*1024 # FlexAttention sequence length
    val_seq_len = 4*64*1024 # FlexAttention sequence length for validation
    # optimization
    num_iterations = 1750 # number of iterations to run
    cooldown_frac = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    val_loss_every = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint = False
args = Hyperparameters()

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert world_size == 8 # this code is designed for 8xH100
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
from datetime import datetime
if master_process:
    # run_id = datetime.now().strftime("%Y%m%d_%H%M%S")
    run_id = str(int(time.time() * 1000))
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(vocab_size=50257, num_layers=12, num_heads=6, model_dim=768, max_seq_len=max(args.train_seq_len, args.val_seq_len)).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = NormMuon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0, sgd_coeff=0.5)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr(step: int):
    x = step / args.num_iterations # progress in training
    assert 0 <= x < 1
    if x < 1 - args.cooldown_frac:
        return 1.0
    else:
        w = (1 - x) / args.cooldown_frac
        return w * 1.0 + (1 - w) * 0.1

# attention window size schedule: linearly increase
@lru_cache(1)
def get_window_size_blocks_helper(window_size: int):
    return torch.tensor(window_size // 128, dtype=torch.int32, pin_memory=True).cuda(non_blocking=True)
def get_window_size_blocks(step: int):
    x = step / args.num_iterations # progress in training
    assert 0 <= x <= 1
    # Linearly increase the block-wise sliding window size over training 128 -> 1792
    # increase by @fernbear.bsky.social; block-wise by @YouJiacheng
    window_size = next_multiple_of_n(1728 * x, n=128)
    return get_window_size_blocks_helper(window_size)

model: nn.Module = torch.compile(model, dynamic=False)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 10
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, world_size * args.train_seq_len, align_to_bos=True)
for _ in range(warmup_steps):
    inputs, targets = next(train_loader)
    model(inputs, targets, get_window_size_blocks(1)).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, world_size * args.train_seq_len, align_to_bos=True)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        val_batch_size = world_size * args.val_seq_len
        assert args.val_tokens % val_batch_size == 0
        val_steps = args.val_tokens // val_batch_size
        val_loader = distributed_data_generator(args.val_files, val_batch_size, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets = next(val_loader)
                val_loss += model(inputs, targets, get_window_size_blocks(step))
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    inputs, targets = next(train_loader)
    model(inputs, targets, get_window_size_blocks(step)).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * get_lr(step)
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()
====================================================================================================
Running Python 3.12.11 | packaged by conda-forge | (main, Jun  4 2025, 14:45:31) [GCC 13.3.0]
Running PyTorch 2.9.0.dev20250824+cu126 compiled for CUDA 12.6
Sun Aug 24 17:39:58 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 570.158.01             Driver Version: 570.158.01     CUDA Version: 12.8     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA H100 80GB HBM3          On  |   00000000:04:00.0 Off |                    0 |
| N/A   40C    P0            121W /  700W |    5858MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  |   00000000:23:00.0 Off |                    0 |
| N/A   33C    P0            116W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  |   00000000:43:00.0 Off |                    0 |
| N/A   38C    P0            122W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  |   00000000:64:00.0 Off |                    0 |
| N/A   32C    P0            116W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  |   00000000:84:00.0 Off |                    0 |
| N/A   38C    P0            122W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  |   00000000:A3:00.0 Off |                    0 |
| N/A   33C    P0            121W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  |   00000000:C3:00.0 Off |                    0 |
| N/A   39C    P0            120W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  |   00000000:E4:00.0 Off |                    0 |
| N/A   32C    P0            113W /  700W |    1519MiB /  81559MiB |      0%      Default |
|                                         |                        |             Disabled |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
+-----------------------------------------------------------------------------------------+

====================================================================================================
step:0/1750 val_loss:10.8258 train_time:0ms step_avg:0.08ms
step:1/1750 train_time:142ms step_avg:141.79ms
step:2/1750 train_time:163ms step_avg:81.33ms
step:3/1750 train_time:243ms step_avg:81.07ms
step:4/1750 train_time:335ms step_avg:83.78ms
step:5/1750 train_time:428ms step_avg:85.53ms
step:6/1750 train_time:520ms step_avg:86.68ms
step:7/1750 train_time:612ms step_avg:87.45ms
step:8/1750 train_time:704ms step_avg:88.03ms
step:9/1750 train_time:797ms step_avg:88.54ms
step:10/1750 train_time:889ms step_avg:88.85ms
step:11/1750 train_time:981ms step_avg:89.22ms
step:12/1750 train_time:1078ms step_avg:89.84ms
step:13/1750 train_time:1175ms step_avg:90.37ms
step:14/1750 train_time:1270ms step_avg:90.74ms
step:15/1750 train_time:1363ms step_avg:90.89ms
step:16/1750 train_time:1457ms step_avg:91.05ms
step:17/1750 train_time:1549ms step_avg:91.14ms
step:18/1750 train_time:1642ms step_avg:91.21ms
step:19/1750 train_time:1735ms step_avg:91.31ms
step:20/1750 train_time:1827ms step_avg:91.36ms
step:21/1750 train_time:1920ms step_avg:91.44ms
step:22/1750 train_time:2014ms step_avg:91.53ms
step:23/1750 train_time:2109ms step_avg:91.68ms
step:24/1750 train_time:2204ms step_avg:91.82ms
step:25/1750 train_time:2298ms step_avg:91.91ms
step:26/1750 train_time:2392ms step_avg:91.99ms
step:27/1750 train_time:2484ms step_avg:92.01ms
step:28/1750 train_time:2577ms step_avg:92.03ms
step:29/1750 train_time:2670ms step_avg:92.06ms
step:30/1750 train_time:2762ms step_avg:92.08ms
step:31/1750 train_time:2855ms step_avg:92.11ms
step:32/1750 train_time:2948ms step_avg:92.13ms
step:33/1750 train_time:3042ms step_avg:92.18ms
step:34/1750 train_time:3137ms step_avg:92.25ms
step:35/1750 train_time:3232ms step_avg:92.34ms
step:36/1750 train_time:3325ms step_avg:92.37ms
step:37/1750 train_time:3419ms step_avg:92.41ms
step:38/1750 train_time:3512ms step_avg:92.43ms
step:39/1750 train_time:3606ms step_avg:92.45ms
step:40/1750 train_time:3699ms step_avg:92.48ms
step:41/1750 train_time:3792ms step_avg:92.48ms
step:42/1750 train_time:3885ms step_avg:92.49ms
step:43/1750 train_time:3978ms step_avg:92.50ms
step:44/1750 train_time:4072ms step_avg:92.55ms
step:45/1750 train_time:4165ms step_avg:92.56ms
step:46/1750 train_time:4259ms step_avg:92.59ms
step:47/1750 train_time:4353ms step_avg:92.62ms
step:48/1750 train_time:4447ms step_avg:92.64ms
step:49/1750 train_time:4541ms step_avg:92.68ms
step:50/1750 train_time:4635ms step_avg:92.69ms
step:51/1750 train_time:4727ms step_avg:92.68ms
step:52/1750 train_time:4820ms step_avg:92.70ms
step:53/1750 train_time:4913ms step_avg:92.70ms
step:54/1750 train_time:5006ms step_avg:92.71ms
step:55/1750 train_time:5100ms step_avg:92.73ms
step:56/1750 train_time:5193ms step_avg:92.74ms
step:57/1750 train_time:5287ms step_avg:92.75ms
step:58/1750 train_time:5381ms step_avg:92.77ms
step:59/1750 train_time:5474ms step_avg:92.78ms
step:60/1750 train_time:5567ms step_avg:92.79ms
step:61/1750 train_time:5661ms step_avg:92.81ms
step:62/1750 train_time:5754ms step_avg:92.81ms
step:63/1750 train_time:5847ms step_avg:92.81ms
step:64/1750 train_time:5940ms step_avg:92.81ms
step:65/1750 train_time:6033ms step_avg:92.82ms
step:66/1750 train_time:6126ms step_avg:92.82ms
step:67/1750 train_time:6220ms step_avg:92.83ms
step:68/1750 train_time:6313ms step_avg:92.84ms
step:69/1750 train_time:6408ms step_avg:92.86ms
step:70/1750 train_time:6501ms step_avg:92.87ms
step:71/1750 train_time:6595ms step_avg:92.88ms
step:72/1750 train_time:6688ms step_avg:92.89ms
step:73/1750 train_time:6782ms step_avg:92.90ms
step:74/1750 train_time:6876ms step_avg:92.92ms
step:75/1750 train_time:6969ms step_avg:92.91ms
step:76/1750 train_time:7062ms step_avg:92.92ms
step:77/1750 train_time:7155ms step_avg:92.92ms
step:78/1750 train_time:7248ms step_avg:92.92ms
step:79/1750 train_time:7341ms step_avg:92.93ms
step:80/1750 train_time:7437ms step_avg:92.96ms
step:81/1750 train_time:7530ms step_avg:92.97ms
step:82/1750 train_time:7624ms step_avg:92.97ms
step:83/1750 train_time:7718ms step_avg:92.98ms
step:84/1750 train_time:7811ms step_avg:92.99ms
step:85/1750 train_time:7905ms step_avg:93.00ms
step:86/1750 train_time:7999ms step_avg:93.01ms
step:87/1750 train_time:8092ms step_avg:93.01ms
step:88/1750 train_time:8184ms step_avg:93.00ms
step:89/1750 train_time:8278ms step_avg:93.02ms
step:90/1750 train_time:8372ms step_avg:93.02ms
step:91/1750 train_time:8465ms step_avg:93.02ms
step:92/1750 train_time:8559ms step_avg:93.03ms
step:93/1750 train_time:8651ms step_avg:93.03ms
step:94/1750 train_time:8745ms step_avg:93.03ms
step:95/1750 train_time:8839ms step_avg:93.04ms
step:96/1750 train_time:8932ms step_avg:93.04ms
step:97/1750 train_time:9025ms step_avg:93.04ms
step:98/1750 train_time:9119ms step_avg:93.05ms
step:99/1750 train_time:9212ms step_avg:93.05ms
step:100/1750 train_time:9305ms step_avg:93.05ms
step:101/1750 train_time:9399ms step_avg:93.06ms
step:102/1750 train_time:9494ms step_avg:93.08ms
step:103/1750 train_time:9587ms step_avg:93.07ms
step:104/1750 train_time:9680ms step_avg:93.08ms
step:105/1750 train_time:9774ms step_avg:93.09ms
step:106/1750 train_time:9868ms step_avg:93.09ms
step:107/1750 train_time:9962ms step_avg:93.10ms
step:108/1750 train_time:10055ms step_avg:93.10ms
step:109/1750 train_time:10147ms step_avg:93.10ms
step:110/1750 train_time:10242ms step_avg:93.10ms
step:111/1750 train_time:10335ms step_avg:93.11ms
step:112/1750 train_time:10428ms step_avg:93.11ms
step:113/1750 train_time:10522ms step_avg:93.11ms
step:114/1750 train_time:10615ms step_avg:93.12ms
step:115/1750 train_time:10708ms step_avg:93.12ms
step:116/1750 train_time:10802ms step_avg:93.12ms
step:117/1750 train_time:10896ms step_avg:93.13ms
step:118/1750 train_time:10990ms step_avg:93.14ms
step:119/1750 train_time:11083ms step_avg:93.13ms
step:120/1750 train_time:11177ms step_avg:93.14ms
step:121/1750 train_time:11270ms step_avg:93.14ms
step:122/1750 train_time:11364ms step_avg:93.14ms
step:123/1750 train_time:11457ms step_avg:93.15ms
step:124/1750 train_time:11550ms step_avg:93.15ms
step:125/1750 train_time:11644ms step_avg:93.15ms
step:125/1750 val_loss:4.6693 train_time:11727ms step_avg:93.82ms
step:126/1750 train_time:11751ms step_avg:93.26ms
step:127/1750 train_time:11839ms step_avg:93.22ms
step:128/1750 train_time:11943ms step_avg:93.31ms
step:129/1750 train_time:12039ms step_avg:93.32ms
step:130/1750 train_time:12132ms step_avg:93.33ms
step:131/1750 train_time:12225ms step_avg:93.32ms
step:132/1750 train_time:12317ms step_avg:93.31ms
step:133/1750 train_time:12410ms step_avg:93.31ms
step:134/1750 train_time:12503ms step_avg:93.30ms
step:135/1750 train_time:12595ms step_avg:93.30ms
step:136/1750 train_time:12688ms step_avg:93.29ms
step:137/1750 train_time:12782ms step_avg:93.30ms
step:138/1750 train_time:12879ms step_avg:93.33ms
step:139/1750 train_time:12976ms step_avg:93.35ms
step:140/1750 train_time:13072ms step_avg:93.37ms
step:141/1750 train_time:13165ms step_avg:93.37ms
step:142/1750 train_time:13258ms step_avg:93.37ms
step:143/1750 train_time:13352ms step_avg:93.37ms
step:144/1750 train_time:13446ms step_avg:93.37ms
step:145/1750 train_time:13538ms step_avg:93.37ms
step:146/1750 train_time:13632ms step_avg:93.37ms
step:147/1750 train_time:13726ms step_avg:93.37ms
step:148/1750 train_time:13821ms step_avg:93.38ms
step:149/1750 train_time:13915ms step_avg:93.39ms
step:150/1750 train_time:14011ms step_avg:93.41ms
step:151/1750 train_time:14105ms step_avg:93.41ms
step:152/1750 train_time:14198ms step_avg:93.41ms
step:153/1750 train_time:14292ms step_avg:93.41ms
step:154/1750 train_time:14385ms step_avg:93.41ms
step:155/1750 train_time:14478ms step_avg:93.40ms
step:156/1750 train_time:14572ms step_avg:93.41ms
step:157/1750 train_time:14665ms step_avg:93.40ms
step:158/1750 train_time:14758ms step_avg:93.40ms
step:159/1750 train_time:14852ms step_avg:93.41ms
step:160/1750 train_time:14947ms step_avg:93.42ms
step:161/1750 train_time:15041ms step_avg:93.42ms
step:162/1750 train_time:15136ms step_avg:93.43ms
step:163/1750 train_time:15230ms step_avg:93.43ms
step:164/1750 train_time:15323ms step_avg:93.44ms
step:165/1750 train_time:15417ms step_avg:93.43ms
step:166/1750 train_time:15510ms step_avg:93.44ms
step:167/1750 train_time:15604ms step_avg:93.43ms
step:168/1750 train_time:15697ms step_avg:93.43ms
step:169/1750 train_time:15790ms step_avg:93.43ms
step:170/1750 train_time:15884ms step_avg:93.43ms
step:171/1750 train_time:15978ms step_avg:93.44ms
step:172/1750 train_time:16072ms step_avg:93.44ms
step:173/1750 train_time:16166ms step_avg:93.45ms
step:174/1750 train_time:16260ms step_avg:93.45ms
step:175/1750 train_time:16353ms step_avg:93.45ms
step:176/1750 train_time:16447ms step_avg:93.45ms
step:177/1750 train_time:16540ms step_avg:93.45ms
step:178/1750 train_time:16634ms step_avg:93.45ms
step:179/1750 train_time:16728ms step_avg:93.45ms
step:180/1750 train_time:16822ms step_avg:93.45ms
step:181/1750 train_time:16915ms step_avg:93.45ms
step:182/1750 train_time:17009ms step_avg:93.45ms
step:183/1750 train_time:17103ms step_avg:93.46ms
step:184/1750 train_time:17197ms step_avg:93.46ms
step:185/1750 train_time:17291ms step_avg:93.46ms
step:186/1750 train_time:17384ms step_avg:93.46ms
step:187/1750 train_time:17477ms step_avg:93.46ms
step:188/1750 train_time:17571ms step_avg:93.46ms
step:189/1750 train_time:17663ms step_avg:93.46ms
step:190/1750 train_time:17757ms step_avg:93.46ms
step:191/1750 train_time:17851ms step_avg:93.46ms
step:192/1750 train_time:17944ms step_avg:93.46ms
step:193/1750 train_time:18038ms step_avg:93.46ms
step:194/1750 train_time:18132ms step_avg:93.46ms
step:195/1750 train_time:18226ms step_avg:93.47ms
step:196/1750 train_time:18319ms step_avg:93.46ms
step:197/1750 train_time:18413ms step_avg:93.47ms
step:198/1750 train_time:18506ms step_avg:93.46ms
step:199/1750 train_time:18599ms step_avg:93.46ms
step:200/1750 train_time:18694ms step_avg:93.47ms
step:201/1750 train_time:18788ms step_avg:93.47ms
step:202/1750 train_time:18881ms step_avg:93.47ms
step:203/1750 train_time:18975ms step_avg:93.48ms
step:204/1750 train_time:19070ms step_avg:93.48ms
step:205/1750 train_time:19163ms step_avg:93.48ms
step:206/1750 train_time:19257ms step_avg:93.48ms
step:207/1750 train_time:19351ms step_avg:93.48ms
step:208/1750 train_time:19444ms step_avg:93.48ms
step:209/1750 train_time:19538ms step_avg:93.48ms
step:210/1750 train_time:19632ms step_avg:93.48ms
step:211/1750 train_time:19725ms step_avg:93.48ms
step:212/1750 train_time:19818ms step_avg:93.48ms
step:213/1750 train_time:19912ms step_avg:93.49ms
step:214/1750 train_time:20006ms step_avg:93.49ms
step:215/1750 train_time:20099ms step_avg:93.49ms
step:216/1750 train_time:20193ms step_avg:93.49ms
step:217/1750 train_time:20287ms step_avg:93.49ms
step:218/1750 train_time:20380ms step_avg:93.49ms
step:219/1750 train_time:20475ms step_avg:93.49ms
step:220/1750 train_time:20568ms step_avg:93.49ms
step:221/1750 train_time:20662ms step_avg:93.49ms
step:222/1750 train_time:20755ms step_avg:93.49ms
step:223/1750 train_time:20849ms step_avg:93.49ms
step:224/1750 train_time:20943ms step_avg:93.50ms
step:225/1750 train_time:21037ms step_avg:93.50ms
step:226/1750 train_time:21131ms step_avg:93.50ms
step:227/1750 train_time:21225ms step_avg:93.50ms
step:228/1750 train_time:21319ms step_avg:93.50ms
step:229/1750 train_time:21413ms step_avg:93.50ms
step:230/1750 train_time:21506ms step_avg:93.50ms
step:231/1750 train_time:21599ms step_avg:93.50ms
step:232/1750 train_time:21693ms step_avg:93.50ms
step:233/1750 train_time:21787ms step_avg:93.51ms
step:234/1750 train_time:21881ms step_avg:93.51ms
step:235/1750 train_time:21974ms step_avg:93.51ms
step:236/1750 train_time:22068ms step_avg:93.51ms
step:237/1750 train_time:22162ms step_avg:93.51ms
step:238/1750 train_time:22255ms step_avg:93.51ms
step:239/1750 train_time:22349ms step_avg:93.51ms
step:240/1750 train_time:22443ms step_avg:93.51ms
step:241/1750 train_time:22537ms step_avg:93.51ms
step:242/1750 train_time:22631ms step_avg:93.51ms
step:243/1750 train_time:22724ms step_avg:93.52ms
step:244/1750 train_time:22818ms step_avg:93.51ms
step:245/1750 train_time:22911ms step_avg:93.51ms
step:246/1750 train_time:23005ms step_avg:93.52ms
step:247/1750 train_time:23098ms step_avg:93.52ms
step:248/1750 train_time:23193ms step_avg:93.52ms
step:249/1750 train_time:23286ms step_avg:93.52ms
step:250/1750 train_time:23380ms step_avg:93.52ms
step:250/1750 val_loss:4.1064 train_time:23464ms step_avg:93.86ms
step:251/1750 train_time:23486ms step_avg:93.57ms
step:252/1750 train_time:23575ms step_avg:93.55ms
step:253/1750 train_time:23672ms step_avg:93.57ms
step:254/1750 train_time:23766ms step_avg:93.57ms
step:255/1750 train_time:23860ms step_avg:93.57ms
step:256/1750 train_time:23952ms step_avg:93.56ms
step:257/1750 train_time:24045ms step_avg:93.56ms
step:258/1750 train_time:24138ms step_avg:93.56ms
step:259/1750 train_time:24231ms step_avg:93.56ms
step:260/1750 train_time:24324ms step_avg:93.55ms
step:261/1750 train_time:24420ms step_avg:93.56ms
step:262/1750 train_time:24516ms step_avg:93.57ms
step:263/1750 train_time:24613ms step_avg:93.58ms
step:264/1750 train_time:24708ms step_avg:93.59ms
step:265/1750 train_time:24803ms step_avg:93.59ms
step:266/1750 train_time:24896ms step_avg:93.59ms
step:267/1750 train_time:24990ms step_avg:93.59ms
step:268/1750 train_time:25084ms step_avg:93.60ms
step:269/1750 train_time:25178ms step_avg:93.60ms
step:270/1750 train_time:25271ms step_avg:93.60ms
step:271/1750 train_time:25365ms step_avg:93.60ms
step:272/1750 train_time:25460ms step_avg:93.60ms
step:273/1750 train_time:25556ms step_avg:93.61ms
step:274/1750 train_time:25651ms step_avg:93.62ms
step:275/1750 train_time:25745ms step_avg:93.62ms
step:276/1750 train_time:25840ms step_avg:93.62ms
step:277/1750 train_time:25934ms step_avg:93.63ms
step:278/1750 train_time:26028ms step_avg:93.63ms
step:279/1750 train_time:26121ms step_avg:93.62ms
step:280/1750 train_time:26215ms step_avg:93.62ms
step:281/1750 train_time:26309ms step_avg:93.63ms
step:282/1750 train_time:26404ms step_avg:93.63ms
step:283/1750 train_time:26499ms step_avg:93.64ms
step:284/1750 train_time:26593ms step_avg:93.64ms
step:285/1750 train_time:26687ms step_avg:93.64ms
step:286/1750 train_time:26782ms step_avg:93.64ms
step:287/1750 train_time:26877ms step_avg:93.65ms
step:288/1750 train_time:26971ms step_avg:93.65ms
step:289/1750 train_time:27065ms step_avg:93.65ms
step:290/1750 train_time:27158ms step_avg:93.65ms
step:291/1750 train_time:27252ms step_avg:93.65ms
step:292/1750 train_time:27346ms step_avg:93.65ms
step:293/1750 train_time:27441ms step_avg:93.65ms
step:294/1750 train_time:27535ms step_avg:93.66ms
step:295/1750 train_time:27630ms step_avg:93.66ms
step:296/1750 train_time:27723ms step_avg:93.66ms
step:297/1750 train_time:27818ms step_avg:93.66ms
step:298/1750 train_time:27914ms step_avg:93.67ms
step:299/1750 train_time:28008ms step_avg:93.67ms
step:300/1750 train_time:28102ms step_avg:93.67ms
step:301/1750 train_time:28195ms step_avg:93.67ms
step:302/1750 train_time:28290ms step_avg:93.67ms
step:303/1750 train_time:28384ms step_avg:93.67ms
step:304/1750 train_time:28477ms step_avg:93.67ms
step:305/1750 train_time:28572ms step_avg:93.68ms
step:306/1750 train_time:28666ms step_avg:93.68ms
step:307/1750 train_time:28760ms step_avg:93.68ms
step:308/1750 train_time:28854ms step_avg:93.68ms
step:309/1750 train_time:28949ms step_avg:93.69ms
step:310/1750 train_time:29043ms step_avg:93.69ms
step:311/1750 train_time:29137ms step_avg:93.69ms
step:312/1750 train_time:29232ms step_avg:93.69ms
step:313/1750 train_time:29327ms step_avg:93.69ms
step:314/1750 train_time:29420ms step_avg:93.69ms
step:315/1750 train_time:29515ms step_avg:93.70ms
step:316/1750 train_time:29610ms step_avg:93.70ms
step:317/1750 train_time:29704ms step_avg:93.70ms
step:318/1750 train_time:29799ms step_avg:93.71ms
step:319/1750 train_time:29893ms step_avg:93.71ms
step:320/1750 train_time:30278ms step_avg:94.62ms
step:321/1750 train_time:30387ms step_avg:94.66ms
step:322/1750 train_time:30479ms step_avg:94.66ms
step:323/1750 train_time:30572ms step_avg:94.65ms
step:324/1750 train_time:30665ms step_avg:94.65ms
step:325/1750 train_time:30758ms step_avg:94.64ms
step:326/1750 train_time:30851ms step_avg:94.63ms
step:327/1750 train_time:30944ms step_avg:94.63ms
step:328/1750 train_time:31036ms step_avg:94.62ms
step:329/1750 train_time:31130ms step_avg:94.62ms
step:330/1750 train_time:31227ms step_avg:94.63ms
step:331/1750 train_time:31327ms step_avg:94.64ms
step:332/1750 train_time:31423ms step_avg:94.65ms
step:333/1750 train_time:31516ms step_avg:94.64ms
step:334/1750 train_time:31611ms step_avg:94.64ms
step:335/1750 train_time:31704ms step_avg:94.64ms
step:336/1750 train_time:31797ms step_avg:94.63ms
step:337/1750 train_time:31891ms step_avg:94.63ms
step:338/1750 train_time:31984ms step_avg:94.63ms
step:339/1750 train_time:32077ms step_avg:94.62ms
step:340/1750 train_time:32172ms step_avg:94.62ms
step:341/1750 train_time:32268ms step_avg:94.63ms
step:342/1750 train_time:32365ms step_avg:94.63ms
step:343/1750 train_time:32460ms step_avg:94.63ms
step:344/1750 train_time:32554ms step_avg:94.63ms
step:345/1750 train_time:32647ms step_avg:94.63ms
step:346/1750 train_time:32741ms step_avg:94.63ms
step:347/1750 train_time:32835ms step_avg:94.62ms
step:348/1750 train_time:32929ms step_avg:94.62ms
step:349/1750 train_time:33021ms step_avg:94.62ms
step:350/1750 train_time:33115ms step_avg:94.61ms
step:351/1750 train_time:33211ms step_avg:94.62ms
step:352/1750 train_time:33306ms step_avg:94.62ms
step:353/1750 train_time:33400ms step_avg:94.62ms
step:354/1750 train_time:33494ms step_avg:94.62ms
step:355/1750 train_time:33589ms step_avg:94.62ms
step:356/1750 train_time:33682ms step_avg:94.61ms
step:357/1750 train_time:33777ms step_avg:94.61ms
step:358/1750 train_time:33871ms step_avg:94.61ms
step:359/1750 train_time:33966ms step_avg:94.61ms
step:360/1750 train_time:34059ms step_avg:94.61ms
step:361/1750 train_time:34154ms step_avg:94.61ms
step:362/1750 train_time:34248ms step_avg:94.61ms
step:363/1750 train_time:34343ms step_avg:94.61ms
step:364/1750 train_time:34437ms step_avg:94.61ms
step:365/1750 train_time:34532ms step_avg:94.61ms
step:366/1750 train_time:34626ms step_avg:94.61ms
step:367/1750 train_time:34720ms step_avg:94.61ms
step:368/1750 train_time:34814ms step_avg:94.60ms
step:369/1750 train_time:34908ms step_avg:94.60ms
step:370/1750 train_time:35002ms step_avg:94.60ms
step:371/1750 train_time:35096ms step_avg:94.60ms
step:372/1750 train_time:35190ms step_avg:94.60ms
step:373/1750 train_time:35285ms step_avg:94.60ms
step:374/1750 train_time:35379ms step_avg:94.60ms
step:375/1750 train_time:35473ms step_avg:94.59ms
step:375/1750 val_loss:3.8953 train_time:35557ms step_avg:94.82ms
step:376/1750 train_time:35581ms step_avg:94.63ms
step:377/1750 train_time:35670ms step_avg:94.61ms
step:378/1750 train_time:35770ms step_avg:94.63ms
step:379/1750 train_time:35864ms step_avg:94.63ms
step:380/1750 train_time:35958ms step_avg:94.63ms
step:381/1750 train_time:36051ms step_avg:94.62ms
step:382/1750 train_time:36143ms step_avg:94.62ms
step:383/1750 train_time:36236ms step_avg:94.61ms
step:384/1750 train_time:36329ms step_avg:94.61ms
step:385/1750 train_time:36422ms step_avg:94.60ms
step:386/1750 train_time:36516ms step_avg:94.60ms
step:387/1750 train_time:36611ms step_avg:94.60ms
step:388/1750 train_time:36708ms step_avg:94.61ms
step:389/1750 train_time:36803ms step_avg:94.61ms
step:390/1750 train_time:36898ms step_avg:94.61ms
step:391/1750 train_time:36994ms step_avg:94.61ms
step:392/1750 train_time:37089ms step_avg:94.62ms
step:393/1750 train_time:37184ms step_avg:94.62ms
step:394/1750 train_time:37280ms step_avg:94.62ms
step:395/1750 train_time:37375ms step_avg:94.62ms
step:396/1750 train_time:37471ms step_avg:94.62ms
step:397/1750 train_time:37567ms step_avg:94.63ms
step:398/1750 train_time:37664ms step_avg:94.63ms
step:399/1750 train_time:37762ms step_avg:94.64ms
step:400/1750 train_time:37858ms step_avg:94.65ms
step:401/1750 train_time:37955ms step_avg:94.65ms
step:402/1750 train_time:38050ms step_avg:94.65ms
step:403/1750 train_time:38146ms step_avg:94.65ms
step:404/1750 train_time:38241ms step_avg:94.66ms
step:405/1750 train_time:38337ms step_avg:94.66ms
step:406/1750 train_time:38433ms step_avg:94.66ms
step:407/1750 train_time:38529ms step_avg:94.67ms
step:408/1750 train_time:38625ms step_avg:94.67ms
step:409/1750 train_time:38722ms step_avg:94.68ms
step:410/1750 train_time:38820ms step_avg:94.68ms
step:411/1750 train_time:38917ms step_avg:94.69ms
step:412/1750 train_time:39013ms step_avg:94.69ms
step:413/1750 train_time:39108ms step_avg:94.69ms
step:414/1750 train_time:39203ms step_avg:94.69ms
step:415/1750 train_time:39300ms step_avg:94.70ms
step:416/1750 train_time:39396ms step_avg:94.70ms
step:417/1750 train_time:39492ms step_avg:94.70ms
step:418/1750 train_time:39588ms step_avg:94.71ms
step:419/1750 train_time:39684ms step_avg:94.71ms
step:420/1750 train_time:39781ms step_avg:94.72ms
step:421/1750 train_time:39878ms step_avg:94.72ms
step:422/1750 train_time:39973ms step_avg:94.72ms
step:423/1750 train_time:40069ms step_avg:94.72ms
step:424/1750 train_time:40165ms step_avg:94.73ms
step:425/1750 train_time:40260ms step_avg:94.73ms
step:426/1750 train_time:40356ms step_avg:94.73ms
step:427/1750 train_time:40452ms step_avg:94.73ms
step:428/1750 train_time:40547ms step_avg:94.74ms
step:429/1750 train_time:40643ms step_avg:94.74ms
step:430/1750 train_time:40740ms step_avg:94.74ms
step:431/1750 train_time:40838ms step_avg:94.75ms
step:432/1750 train_time:40934ms step_avg:94.76ms
step:433/1750 train_time:41031ms step_avg:94.76ms
step:434/1750 train_time:41126ms step_avg:94.76ms
step:435/1750 train_time:41222ms step_avg:94.76ms
step:436/1750 train_time:41318ms step_avg:94.77ms
step:437/1750 train_time:41415ms step_avg:94.77ms
step:438/1750 train_time:41510ms step_avg:94.77ms
step:439/1750 train_time:41606ms step_avg:94.77ms
step:440/1750 train_time:41702ms step_avg:94.78ms
step:441/1750 train_time:41798ms step_avg:94.78ms
step:442/1750 train_time:41894ms step_avg:94.78ms
step:443/1750 train_time:41990ms step_avg:94.79ms
step:444/1750 train_time:42086ms step_avg:94.79ms
step:445/1750 train_time:42182ms step_avg:94.79ms
step:446/1750 train_time:42278ms step_avg:94.79ms
step:447/1750 train_time:42374ms step_avg:94.80ms
step:448/1750 train_time:42470ms step_avg:94.80ms
step:449/1750 train_time:42566ms step_avg:94.80ms
step:450/1750 train_time:42662ms step_avg:94.80ms
step:451/1750 train_time:42759ms step_avg:94.81ms
step:452/1750 train_time:42855ms step_avg:94.81ms
step:453/1750 train_time:42951ms step_avg:94.81ms
step:454/1750 train_time:43047ms step_avg:94.82ms
step:455/1750 train_time:43143ms step_avg:94.82ms
step:456/1750 train_time:43239ms step_avg:94.82ms
step:457/1750 train_time:43335ms step_avg:94.83ms
step:458/1750 train_time:43431ms step_avg:94.83ms
step:459/1750 train_time:43527ms step_avg:94.83ms
step:460/1750 train_time:43622ms step_avg:94.83ms
step:461/1750 train_time:43718ms step_avg:94.83ms
step:462/1750 train_time:43814ms step_avg:94.84ms
step:463/1750 train_time:43911ms step_avg:94.84ms
step:464/1750 train_time:44006ms step_avg:94.84ms
step:465/1750 train_time:44102ms step_avg:94.84ms
step:466/1750 train_time:44198ms step_avg:94.85ms
step:467/1750 train_time:44294ms step_avg:94.85ms
step:468/1750 train_time:44391ms step_avg:94.85ms
step:469/1750 train_time:44486ms step_avg:94.85ms
step:470/1750 train_time:44582ms step_avg:94.86ms
step:471/1750 train_time:44679ms step_avg:94.86ms
step:472/1750 train_time:44775ms step_avg:94.86ms
step:473/1750 train_time:44871ms step_avg:94.86ms
step:474/1750 train_time:44967ms step_avg:94.87ms
step:475/1750 train_time:45062ms step_avg:94.87ms
step:476/1750 train_time:45159ms step_avg:94.87ms
step:477/1750 train_time:45255ms step_avg:94.87ms
step:478/1750 train_time:45350ms step_avg:94.87ms
step:479/1750 train_time:45446ms step_avg:94.88ms
step:480/1750 train_time:45542ms step_avg:94.88ms
step:481/1750 train_time:45638ms step_avg:94.88ms
step:482/1750 train_time:45735ms step_avg:94.89ms
step:483/1750 train_time:45831ms step_avg:94.89ms
step:484/1750 train_time:45926ms step_avg:94.89ms
step:485/1750 train_time:46022ms step_avg:94.89ms
step:486/1750 train_time:46118ms step_avg:94.89ms
step:487/1750 train_time:46214ms step_avg:94.89ms
step:488/1750 train_time:46309ms step_avg:94.90ms
step:489/1750 train_time:46406ms step_avg:94.90ms
step:490/1750 train_time:46502ms step_avg:94.90ms
step:491/1750 train_time:46598ms step_avg:94.90ms
step:492/1750 train_time:46693ms step_avg:94.91ms
step:493/1750 train_time:46789ms step_avg:94.91ms
step:494/1750 train_time:46885ms step_avg:94.91ms
step:495/1750 train_time:46981ms step_avg:94.91ms
step:496/1750 train_time:47077ms step_avg:94.91ms
step:497/1750 train_time:47174ms step_avg:94.92ms
step:498/1750 train_time:47269ms step_avg:94.92ms
step:499/1750 train_time:47365ms step_avg:94.92ms
step:500/1750 train_time:47461ms step_avg:94.92ms
step:500/1750 val_loss:3.7487 train_time:47547ms step_avg:95.09ms
step:501/1750 train_time:47569ms step_avg:94.95ms
step:502/1750 train_time:47663ms step_avg:94.95ms
step:503/1750 train_time:47764ms step_avg:94.96ms
step:504/1750 train_time:47861ms step_avg:94.96ms
step:505/1750 train_time:47956ms step_avg:94.96ms
step:506/1750 train_time:48051ms step_avg:94.96ms
step:507/1750 train_time:48146ms step_avg:94.96ms
step:508/1750 train_time:48241ms step_avg:94.96ms
step:509/1750 train_time:48336ms step_avg:94.96ms
step:510/1750 train_time:48431ms step_avg:94.96ms
step:511/1750 train_time:48529ms step_avg:94.97ms
step:512/1750 train_time:48627ms step_avg:94.97ms
step:513/1750 train_time:48724ms step_avg:94.98ms
step:514/1750 train_time:48822ms step_avg:94.99ms
step:515/1750 train_time:48919ms step_avg:94.99ms
step:516/1750 train_time:49015ms step_avg:94.99ms
step:517/1750 train_time:49111ms step_avg:94.99ms
step:518/1750 train_time:49205ms step_avg:94.99ms
step:519/1750 train_time:49301ms step_avg:94.99ms
step:520/1750 train_time:49397ms step_avg:94.99ms
step:521/1750 train_time:49493ms step_avg:95.00ms
step:522/1750 train_time:49591ms step_avg:95.00ms
step:523/1750 train_time:49688ms step_avg:95.01ms
step:524/1750 train_time:49785ms step_avg:95.01ms
step:525/1750 train_time:49881ms step_avg:95.01ms
step:526/1750 train_time:49977ms step_avg:95.01ms
step:527/1750 train_time:50073ms step_avg:95.02ms
step:528/1750 train_time:50169ms step_avg:95.02ms
step:529/1750 train_time:50264ms step_avg:95.02ms
step:530/1750 train_time:50360ms step_avg:95.02ms
step:531/1750 train_time:50456ms step_avg:95.02ms
step:532/1750 train_time:50553ms step_avg:95.02ms
step:533/1750 train_time:50650ms step_avg:95.03ms
step:534/1750 train_time:50747ms step_avg:95.03ms
step:535/1750 train_time:50843ms step_avg:95.03ms
step:536/1750 train_time:50941ms step_avg:95.04ms
step:537/1750 train_time:51037ms step_avg:95.04ms
step:538/1750 train_time:51133ms step_avg:95.04ms
step:539/1750 train_time:51228ms step_avg:95.04ms
step:540/1750 train_time:51324ms step_avg:95.05ms
step:541/1750 train_time:51421ms step_avg:95.05ms
step:542/1750 train_time:51519ms step_avg:95.05ms
step:543/1750 train_time:51616ms step_avg:95.06ms
step:544/1750 train_time:51712ms step_avg:95.06ms
step:545/1750 train_time:51810ms step_avg:95.06ms
step:546/1750 train_time:51907ms step_avg:95.07ms
step:547/1750 train_time:52003ms step_avg:95.07ms
step:548/1750 train_time:52100ms step_avg:95.07ms
step:549/1750 train_time:52195ms step_avg:95.07ms
step:550/1750 train_time:52291ms step_avg:95.07ms
step:551/1750 train_time:52387ms step_avg:95.08ms
step:552/1750 train_time:52483ms step_avg:95.08ms
step:553/1750 train_time:52580ms step_avg:95.08ms
step:554/1750 train_time:52677ms step_avg:95.08ms
step:555/1750 train_time:52773ms step_avg:95.09ms
step:556/1750 train_time:52871ms step_avg:95.09ms
step:557/1750 train_time:52969ms step_avg:95.10ms
step:558/1750 train_time:53066ms step_avg:95.10ms
step:559/1750 train_time:53162ms step_avg:95.10ms
step:560/1750 train_time:53259ms step_avg:95.11ms
step:561/1750 train_time:53355ms step_avg:95.11ms
step:562/1750 train_time:53452ms step_avg:95.11ms
step:563/1750 train_time:53548ms step_avg:95.11ms
step:564/1750 train_time:53645ms step_avg:95.12ms
step:565/1750 train_time:53743ms step_avg:95.12ms
step:566/1750 train_time:53839ms step_avg:95.12ms
step:567/1750 train_time:53936ms step_avg:95.13ms
step:568/1750 train_time:54032ms step_avg:95.13ms
step:569/1750 train_time:54129ms step_avg:95.13ms
step:570/1750 train_time:54226ms step_avg:95.13ms
step:571/1750 train_time:54322ms step_avg:95.13ms
step:572/1750 train_time:54419ms step_avg:95.14ms
step:573/1750 train_time:54515ms step_avg:95.14ms
step:574/1750 train_time:54612ms step_avg:95.14ms
step:575/1750 train_time:54708ms step_avg:95.14ms
step:576/1750 train_time:54804ms step_avg:95.15ms
step:577/1750 train_time:54901ms step_avg:95.15ms
step:578/1750 train_time:54998ms step_avg:95.15ms
step:579/1750 train_time:55094ms step_avg:95.15ms
step:580/1750 train_time:55190ms step_avg:95.16ms
step:581/1750 train_time:55288ms step_avg:95.16ms
step:582/1750 train_time:55384ms step_avg:95.16ms
step:583/1750 train_time:55481ms step_avg:95.16ms
step:584/1750 train_time:55577ms step_avg:95.17ms
step:585/1750 train_time:55675ms step_avg:95.17ms
step:586/1750 train_time:55771ms step_avg:95.17ms
step:587/1750 train_time:55868ms step_avg:95.18ms
step:588/1750 train_time:55964ms step_avg:95.18ms
step:589/1750 train_time:56061ms step_avg:95.18ms
step:590/1750 train_time:56158ms step_avg:95.18ms
step:591/1750 train_time:56255ms step_avg:95.19ms
step:592/1750 train_time:56351ms step_avg:95.19ms
step:593/1750 train_time:56447ms step_avg:95.19ms
step:594/1750 train_time:56543ms step_avg:95.19ms
step:595/1750 train_time:56639ms step_avg:95.19ms
step:596/1750 train_time:56736ms step_avg:95.19ms
step:597/1750 train_time:56832ms step_avg:95.20ms
step:598/1750 train_time:56929ms step_avg:95.20ms
step:599/1750 train_time:57025ms step_avg:95.20ms
step:600/1750 train_time:57122ms step_avg:95.20ms
step:601/1750 train_time:57219ms step_avg:95.21ms
step:602/1750 train_time:57316ms step_avg:95.21ms
step:603/1750 train_time:57412ms step_avg:95.21ms
step:604/1750 train_time:57508ms step_avg:95.21ms
step:605/1750 train_time:57605ms step_avg:95.21ms
step:606/1750 train_time:57701ms step_avg:95.22ms
step:607/1750 train_time:57797ms step_avg:95.22ms
step:608/1750 train_time:57893ms step_avg:95.22ms
step:609/1750 train_time:57990ms step_avg:95.22ms
step:610/1750 train_time:58086ms step_avg:95.22ms
step:611/1750 train_time:58182ms step_avg:95.23ms
step:612/1750 train_time:58280ms step_avg:95.23ms
step:613/1750 train_time:58377ms step_avg:95.23ms
step:614/1750 train_time:58473ms step_avg:95.23ms
step:615/1750 train_time:58570ms step_avg:95.24ms
step:616/1750 train_time:58666ms step_avg:95.24ms
step:617/1750 train_time:58763ms step_avg:95.24ms
step:618/1750 train_time:58859ms step_avg:95.24ms
step:619/1750 train_time:58956ms step_avg:95.24ms
step:620/1750 train_time:59053ms step_avg:95.25ms
step:621/1750 train_time:59150ms step_avg:95.25ms
step:622/1750 train_time:59247ms step_avg:95.25ms
step:623/1750 train_time:59342ms step_avg:95.25ms
step:624/1750 train_time:59439ms step_avg:95.25ms
step:625/1750 train_time:59535ms step_avg:95.26ms
step:625/1750 val_loss:3.6631 train_time:59621ms step_avg:95.39ms
step:626/1750 train_time:59642ms step_avg:95.28ms
step:627/1750 train_time:59736ms step_avg:95.27ms
step:628/1750 train_time:59835ms step_avg:95.28ms
step:629/1750 train_time:59932ms step_avg:95.28ms
step:630/1750 train_time:60027ms step_avg:95.28ms
step:631/1750 train_time:60123ms step_avg:95.28ms
step:632/1750 train_time:60218ms step_avg:95.28ms
step:633/1750 train_time:60313ms step_avg:95.28ms
step:634/1750 train_time:60409ms step_avg:95.28ms
step:635/1750 train_time:60504ms step_avg:95.28ms
step:636/1750 train_time:60602ms step_avg:95.29ms
step:637/1750 train_time:60700ms step_avg:95.29ms
step:638/1750 train_time:60798ms step_avg:95.29ms
step:639/1750 train_time:60895ms step_avg:95.30ms
step:640/1750 train_time:60991ms step_avg:95.30ms
step:641/1750 train_time:61087ms step_avg:95.30ms
step:642/1750 train_time:61184ms step_avg:95.30ms
step:643/1750 train_time:61279ms step_avg:95.30ms
step:644/1750 train_time:61375ms step_avg:95.30ms
step:645/1750 train_time:61471ms step_avg:95.30ms
step:646/1750 train_time:61568ms step_avg:95.31ms
step:647/1750 train_time:61666ms step_avg:95.31ms
step:648/1750 train_time:61763ms step_avg:95.31ms
step:649/1750 train_time:61861ms step_avg:95.32ms
step:650/1750 train_time:61957ms step_avg:95.32ms
step:651/1750 train_time:62056ms step_avg:95.32ms
step:652/1750 train_time:62154ms step_avg:95.33ms
step:653/1750 train_time:62252ms step_avg:95.33ms
step:654/1750 train_time:62349ms step_avg:95.33ms
step:655/1750 train_time:62446ms step_avg:95.34ms
step:656/1750 train_time:62544ms step_avg:95.34ms
step:657/1750 train_time:62642ms step_avg:95.35ms
step:658/1750 train_time:62740ms step_avg:95.35ms
step:659/1750 train_time:62839ms step_avg:95.36ms
step:660/1750 train_time:62937ms step_avg:95.36ms
step:661/1750 train_time:63035ms step_avg:95.36ms
step:662/1750 train_time:63133ms step_avg:95.37ms
step:663/1750 train_time:63231ms step_avg:95.37ms
step:664/1750 train_time:63328ms step_avg:95.37ms
step:665/1750 train_time:63425ms step_avg:95.38ms
step:666/1750 train_time:63523ms step_avg:95.38ms
step:667/1750 train_time:63621ms step_avg:95.38ms
step:668/1750 train_time:63719ms step_avg:95.39ms
step:669/1750 train_time:63817ms step_avg:95.39ms
step:670/1750 train_time:63916ms step_avg:95.40ms
step:671/1750 train_time:64014ms step_avg:95.40ms
step:672/1750 train_time:64112ms step_avg:95.41ms
step:673/1750 train_time:64210ms step_avg:95.41ms
step:674/1750 train_time:64308ms step_avg:95.41ms
step:675/1750 train_time:64405ms step_avg:95.42ms
step:676/1750 train_time:64503ms step_avg:95.42ms
step:677/1750 train_time:64601ms step_avg:95.42ms
step:678/1750 train_time:64699ms step_avg:95.43ms
step:679/1750 train_time:64797ms step_avg:95.43ms
step:680/1750 train_time:64895ms step_avg:95.43ms
step:681/1750 train_time:64993ms step_avg:95.44ms
step:682/1750 train_time:65091ms step_avg:95.44ms
step:683/1750 train_time:65188ms step_avg:95.44ms
step:684/1750 train_time:65285ms step_avg:95.45ms
step:685/1750 train_time:65382ms step_avg:95.45ms
step:686/1750 train_time:65480ms step_avg:95.45ms
step:687/1750 train_time:65578ms step_avg:95.46ms
step:688/1750 train_time:65676ms step_avg:95.46ms
step:689/1750 train_time:65774ms step_avg:95.46ms
step:690/1750 train_time:65872ms step_avg:95.47ms
step:691/1750 train_time:65970ms step_avg:95.47ms
step:692/1750 train_time:66069ms step_avg:95.48ms
step:693/1750 train_time:66167ms step_avg:95.48ms
step:694/1750 train_time:66264ms step_avg:95.48ms
step:695/1750 train_time:66361ms step_avg:95.48ms
step:696/1750 train_time:66459ms step_avg:95.49ms
step:697/1750 train_time:66557ms step_avg:95.49ms
step:698/1750 train_time:66655ms step_avg:95.49ms
step:699/1750 train_time:66753ms step_avg:95.50ms
step:700/1750 train_time:66851ms step_avg:95.50ms
step:701/1750 train_time:66948ms step_avg:95.50ms
step:702/1750 train_time:67046ms step_avg:95.51ms
step:703/1750 train_time:67144ms step_avg:95.51ms
step:704/1750 train_time:67242ms step_avg:95.51ms
step:705/1750 train_time:67339ms step_avg:95.52ms
step:706/1750 train_time:67437ms step_avg:95.52ms
step:707/1750 train_time:67534ms step_avg:95.52ms
step:708/1750 train_time:67633ms step_avg:95.53ms
step:709/1750 train_time:67731ms step_avg:95.53ms
step:710/1750 train_time:67829ms step_avg:95.53ms
step:711/1750 train_time:67927ms step_avg:95.54ms
step:712/1750 train_time:68024ms step_avg:95.54ms
step:713/1750 train_time:68121ms step_avg:95.54ms
step:714/1750 train_time:68219ms step_avg:95.54ms
step:715/1750 train_time:68317ms step_avg:95.55ms
step:716/1750 train_time:68415ms step_avg:95.55ms
step:717/1750 train_time:68513ms step_avg:95.56ms
step:718/1750 train_time:68611ms step_avg:95.56ms
step:719/1750 train_time:68709ms step_avg:95.56ms
step:720/1750 train_time:68807ms step_avg:95.57ms
step:721/1750 train_time:68904ms step_avg:95.57ms
step:722/1750 train_time:69002ms step_avg:95.57ms
step:723/1750 train_time:69100ms step_avg:95.57ms
step:724/1750 train_time:69197ms step_avg:95.58ms
step:725/1750 train_time:69295ms step_avg:95.58ms
step:726/1750 train_time:69393ms step_avg:95.58ms
step:727/1750 train_time:69490ms step_avg:95.58ms
step:728/1750 train_time:69588ms step_avg:95.59ms
step:729/1750 train_time:69685ms step_avg:95.59ms
step:730/1750 train_time:69783ms step_avg:95.59ms
step:731/1750 train_time:69881ms step_avg:95.60ms
step:732/1750 train_time:69980ms step_avg:95.60ms
step:733/1750 train_time:70077ms step_avg:95.60ms
step:734/1750 train_time:70175ms step_avg:95.61ms
step:735/1750 train_time:70273ms step_avg:95.61ms
step:736/1750 train_time:70371ms step_avg:95.61ms
step:737/1750 train_time:70469ms step_avg:95.62ms
step:738/1750 train_time:70567ms step_avg:95.62ms
step:739/1750 train_time:70664ms step_avg:95.62ms
step:740/1750 train_time:70762ms step_avg:95.62ms
step:741/1750 train_time:70859ms step_avg:95.63ms
step:742/1750 train_time:70957ms step_avg:95.63ms
step:743/1750 train_time:71055ms step_avg:95.63ms
step:744/1750 train_time:71153ms step_avg:95.64ms
step:745/1750 train_time:71252ms step_avg:95.64ms
step:746/1750 train_time:71350ms step_avg:95.64ms
step:747/1750 train_time:71448ms step_avg:95.65ms
step:748/1750 train_time:71545ms step_avg:95.65ms
step:749/1750 train_time:71643ms step_avg:95.65ms
step:750/1750 train_time:71741ms step_avg:95.65ms
step:750/1750 val_loss:3.5995 train_time:71828ms step_avg:95.77ms
step:751/1750 train_time:71848ms step_avg:95.67ms
step:752/1750 train_time:71949ms step_avg:95.68ms
step:753/1750 train_time:72050ms step_avg:95.68ms
step:754/1750 train_time:72147ms step_avg:95.69ms
step:755/1750 train_time:72244ms step_avg:95.69ms
step:756/1750 train_time:72341ms step_avg:95.69ms
step:757/1750 train_time:72438ms step_avg:95.69ms
step:758/1750 train_time:72535ms step_avg:95.69ms
step:759/1750 train_time:72631ms step_avg:95.69ms
step:760/1750 train_time:72728ms step_avg:95.70ms
step:761/1750 train_time:72827ms step_avg:95.70ms
step:762/1750 train_time:72927ms step_avg:95.70ms
step:763/1750 train_time:73027ms step_avg:95.71ms
step:764/1750 train_time:73125ms step_avg:95.71ms
step:765/1750 train_time:73224ms step_avg:95.72ms
step:766/1750 train_time:73322ms step_avg:95.72ms
step:767/1750 train_time:73421ms step_avg:95.72ms
step:768/1750 train_time:73518ms step_avg:95.73ms
step:769/1750 train_time:73615ms step_avg:95.73ms
step:770/1750 train_time:73713ms step_avg:95.73ms
step:771/1750 train_time:73810ms step_avg:95.73ms
step:772/1750 train_time:73909ms step_avg:95.74ms
step:773/1750 train_time:74008ms step_avg:95.74ms
step:774/1750 train_time:74107ms step_avg:95.74ms
step:775/1750 train_time:74205ms step_avg:95.75ms
step:776/1750 train_time:74303ms step_avg:95.75ms
step:777/1750 train_time:74402ms step_avg:95.75ms
step:778/1750 train_time:74500ms step_avg:95.76ms
step:779/1750 train_time:74598ms step_avg:95.76ms
step:780/1750 train_time:74696ms step_avg:95.76ms
step:781/1750 train_time:74794ms step_avg:95.77ms
step:782/1750 train_time:74892ms step_avg:95.77ms
step:783/1750 train_time:74990ms step_avg:95.77ms
step:784/1750 train_time:75089ms step_avg:95.78ms
step:785/1750 train_time:75188ms step_avg:95.78ms
step:786/1750 train_time:75286ms step_avg:95.78ms
step:787/1750 train_time:75385ms step_avg:95.79ms
step:788/1750 train_time:75483ms step_avg:95.79ms
step:789/1750 train_time:75581ms step_avg:95.79ms
step:790/1750 train_time:75679ms step_avg:95.80ms
step:791/1750 train_time:75777ms step_avg:95.80ms
step:792/1750 train_time:75875ms step_avg:95.80ms
step:793/1750 train_time:75975ms step_avg:95.81ms
step:794/1750 train_time:76073ms step_avg:95.81ms
step:795/1750 train_time:76172ms step_avg:95.81ms
step:796/1750 train_time:76271ms step_avg:95.82ms
step:797/1750 train_time:76371ms step_avg:95.82ms
step:798/1750 train_time:76471ms step_avg:95.83ms
step:799/1750 train_time:76570ms step_avg:95.83ms
step:800/1750 train_time:76670ms step_avg:95.84ms
step:801/1750 train_time:76768ms step_avg:95.84ms
step:802/1750 train_time:76866ms step_avg:95.84ms
step:803/1750 train_time:76965ms step_avg:95.85ms
step:804/1750 train_time:77063ms step_avg:95.85ms
step:805/1750 train_time:77161ms step_avg:95.85ms
step:806/1750 train_time:77260ms step_avg:95.86ms
step:807/1750 train_time:77360ms step_avg:95.86ms
step:808/1750 train_time:77459ms step_avg:95.87ms
step:809/1750 train_time:77558ms step_avg:95.87ms
step:810/1750 train_time:77657ms step_avg:95.87ms
step:811/1750 train_time:77755ms step_avg:95.88ms
step:812/1750 train_time:77853ms step_avg:95.88ms
step:813/1750 train_time:77951ms step_avg:95.88ms
step:814/1750 train_time:78049ms step_avg:95.88ms
step:815/1750 train_time:78146ms step_avg:95.88ms
step:816/1750 train_time:78243ms step_avg:95.89ms
step:817/1750 train_time:78341ms step_avg:95.89ms
step:818/1750 train_time:78440ms step_avg:95.89ms
step:819/1750 train_time:78539ms step_avg:95.90ms
step:820/1750 train_time:78639ms step_avg:95.90ms
step:821/1750 train_time:78737ms step_avg:95.90ms
step:822/1750 train_time:78836ms step_avg:95.91ms
step:823/1750 train_time:78934ms step_avg:95.91ms
step:824/1750 train_time:79032ms step_avg:95.91ms
step:825/1750 train_time:79129ms step_avg:95.91ms
step:826/1750 train_time:79227ms step_avg:95.92ms
step:827/1750 train_time:79325ms step_avg:95.92ms
step:828/1750 train_time:79424ms step_avg:95.92ms
step:829/1750 train_time:79522ms step_avg:95.93ms
step:830/1750 train_time:79622ms step_avg:95.93ms
step:831/1750 train_time:79721ms step_avg:95.93ms
step:832/1750 train_time:79820ms step_avg:95.94ms
step:833/1750 train_time:79918ms step_avg:95.94ms
step:834/1750 train_time:80016ms step_avg:95.94ms
step:835/1750 train_time:80115ms step_avg:95.95ms
step:836/1750 train_time:80213ms step_avg:95.95ms
step:837/1750 train_time:80312ms step_avg:95.95ms
step:838/1750 train_time:80411ms step_avg:95.96ms
step:839/1750 train_time:80511ms step_avg:95.96ms
step:840/1750 train_time:80610ms step_avg:95.96ms
step:841/1750 train_time:80707ms step_avg:95.97ms
step:842/1750 train_time:80805ms step_avg:95.97ms
step:843/1750 train_time:80903ms step_avg:95.97ms
step:844/1750 train_time:81002ms step_avg:95.97ms
step:845/1750 train_time:81100ms step_avg:95.98ms
step:846/1750 train_time:81199ms step_avg:95.98ms
step:847/1750 train_time:81297ms step_avg:95.98ms
step:848/1750 train_time:81396ms step_avg:95.99ms
step:849/1750 train_time:81494ms step_avg:95.99ms
step:850/1750 train_time:81592ms step_avg:95.99ms
step:851/1750 train_time:81692ms step_avg:95.99ms
step:852/1750 train_time:81790ms step_avg:96.00ms
step:853/1750 train_time:81887ms step_avg:96.00ms
step:854/1750 train_time:81985ms step_avg:96.00ms
step:855/1750 train_time:82083ms step_avg:96.00ms
step:856/1750 train_time:82183ms step_avg:96.01ms
step:857/1750 train_time:82281ms step_avg:96.01ms
step:858/1750 train_time:82380ms step_avg:96.01ms
step:859/1750 train_time:82479ms step_avg:96.02ms
step:860/1750 train_time:82578ms step_avg:96.02ms
step:861/1750 train_time:82677ms step_avg:96.02ms
step:862/1750 train_time:82775ms step_avg:96.03ms
step:863/1750 train_time:82874ms step_avg:96.03ms
step:864/1750 train_time:82972ms step_avg:96.03ms
step:865/1750 train_time:83071ms step_avg:96.04ms
step:866/1750 train_time:83169ms step_avg:96.04ms
step:867/1750 train_time:83268ms step_avg:96.04ms
step:868/1750 train_time:83367ms step_avg:96.04ms
step:869/1750 train_time:83465ms step_avg:96.05ms
step:870/1750 train_time:83563ms step_avg:96.05ms
step:871/1750 train_time:83662ms step_avg:96.05ms
step:872/1750 train_time:83760ms step_avg:96.06ms
step:873/1750 train_time:83859ms step_avg:96.06ms
step:874/1750 train_time:83957ms step_avg:96.06ms
step:875/1750 train_time:84055ms step_avg:96.06ms
step:875/1750 val_loss:3.5494 train_time:84142ms step_avg:96.16ms
step:876/1750 train_time:84165ms step_avg:96.08ms
step:877/1750 train_time:84257ms step_avg:96.07ms
step:878/1750 train_time:84359ms step_avg:96.08ms
step:879/1750 train_time:84459ms step_avg:96.09ms
step:880/1750 train_time:84557ms step_avg:96.09ms
step:881/1750 train_time:84655ms step_avg:96.09ms
step:882/1750 train_time:84752ms step_avg:96.09ms
step:883/1750 train_time:84849ms step_avg:96.09ms
step:884/1750 train_time:84946ms step_avg:96.09ms
step:885/1750 train_time:85043ms step_avg:96.09ms
step:886/1750 train_time:85143ms step_avg:96.10ms
step:887/1750 train_time:85243ms step_avg:96.10ms
step:888/1750 train_time:85342ms step_avg:96.11ms
step:889/1750 train_time:85440ms step_avg:96.11ms
step:890/1750 train_time:85538ms step_avg:96.11ms
step:891/1750 train_time:85636ms step_avg:96.11ms
step:892/1750 train_time:85733ms step_avg:96.11ms
step:893/1750 train_time:85830ms step_avg:96.11ms
step:894/1750 train_time:85927ms step_avg:96.12ms
step:895/1750 train_time:86025ms step_avg:96.12ms
step:896/1750 train_time:86123ms step_avg:96.12ms
step:897/1750 train_time:86222ms step_avg:96.12ms
step:898/1750 train_time:86322ms step_avg:96.13ms
step:899/1750 train_time:86421ms step_avg:96.13ms
step:900/1750 train_time:86519ms step_avg:96.13ms
step:901/1750 train_time:86618ms step_avg:96.13ms
step:902/1750 train_time:86717ms step_avg:96.14ms
step:903/1750 train_time:86815ms step_avg:96.14ms
step:904/1750 train_time:86912ms step_avg:96.14ms
step:905/1750 train_time:87010ms step_avg:96.14ms
step:906/1750 train_time:87108ms step_avg:96.15ms
step:907/1750 train_time:87207ms step_avg:96.15ms
step:908/1750 train_time:87306ms step_avg:96.15ms
step:909/1750 train_time:87405ms step_avg:96.16ms
step:910/1750 train_time:87504ms step_avg:96.16ms
step:911/1750 train_time:87603ms step_avg:96.16ms
step:912/1750 train_time:87703ms step_avg:96.17ms
step:913/1750 train_time:87803ms step_avg:96.17ms
step:914/1750 train_time:87901ms step_avg:96.17ms
step:915/1750 train_time:88002ms step_avg:96.18ms
step:916/1750 train_time:88102ms step_avg:96.18ms
step:917/1750 train_time:88200ms step_avg:96.18ms
step:918/1750 train_time:88301ms step_avg:96.19ms
step:919/1750 train_time:88402ms step_avg:96.19ms
step:920/1750 train_time:88502ms step_avg:96.20ms
step:921/1750 train_time:88601ms step_avg:96.20ms
step:922/1750 train_time:88700ms step_avg:96.20ms
step:923/1750 train_time:88800ms step_avg:96.21ms
step:924/1750 train_time:88900ms step_avg:96.21ms
step:925/1750 train_time:88999ms step_avg:96.22ms
step:926/1750 train_time:89100ms step_avg:96.22ms
step:927/1750 train_time:89201ms step_avg:96.23ms
step:928/1750 train_time:89300ms step_avg:96.23ms
step:929/1750 train_time:89398ms step_avg:96.23ms
step:930/1750 train_time:89498ms step_avg:96.23ms
step:931/1750 train_time:89599ms step_avg:96.24ms
step:932/1750 train_time:89698ms step_avg:96.24ms
step:933/1750 train_time:89798ms step_avg:96.25ms
step:934/1750 train_time:89898ms step_avg:96.25ms
step:935/1750 train_time:89998ms step_avg:96.25ms
step:936/1750 train_time:90098ms step_avg:96.26ms
step:937/1750 train_time:90199ms step_avg:96.26ms
step:938/1750 train_time:90299ms step_avg:96.27ms
step:939/1750 train_time:90400ms step_avg:96.27ms
step:940/1750 train_time:90499ms step_avg:96.28ms
step:941/1750 train_time:90601ms step_avg:96.28ms
step:942/1750 train_time:90700ms step_avg:96.28ms
step:943/1750 train_time:90800ms step_avg:96.29ms
step:944/1750 train_time:90900ms step_avg:96.29ms
step:945/1750 train_time:90999ms step_avg:96.30ms
step:946/1750 train_time:91099ms step_avg:96.30ms
step:947/1750 train_time:91200ms step_avg:96.30ms
step:948/1750 train_time:91300ms step_avg:96.31ms
step:949/1750 train_time:91399ms step_avg:96.31ms
step:950/1750 train_time:91499ms step_avg:96.31ms
step:951/1750 train_time:91600ms step_avg:96.32ms
step:952/1750 train_time:91699ms step_avg:96.32ms
step:953/1750 train_time:91799ms step_avg:96.33ms
step:954/1750 train_time:91898ms step_avg:96.33ms
step:955/1750 train_time:91997ms step_avg:96.33ms
step:956/1750 train_time:92096ms step_avg:96.33ms
step:957/1750 train_time:92195ms step_avg:96.34ms
step:958/1750 train_time:92294ms step_avg:96.34ms
step:959/1750 train_time:92394ms step_avg:96.34ms
step:960/1750 train_time:92494ms step_avg:96.35ms
step:961/1750 train_time:92593ms step_avg:96.35ms
step:962/1750 train_time:92694ms step_avg:96.36ms
step:963/1750 train_time:92794ms step_avg:96.36ms
step:964/1750 train_time:92893ms step_avg:96.36ms
step:965/1750 train_time:92992ms step_avg:96.36ms
step:966/1750 train_time:93091ms step_avg:96.37ms
step:967/1750 train_time:93191ms step_avg:96.37ms
step:968/1750 train_time:93290ms step_avg:96.37ms
step:969/1750 train_time:93390ms step_avg:96.38ms
step:970/1750 train_time:93490ms step_avg:96.38ms
step:971/1750 train_time:93589ms step_avg:96.38ms
step:972/1750 train_time:93690ms step_avg:96.39ms
step:973/1750 train_time:93789ms step_avg:96.39ms
step:974/1750 train_time:93889ms step_avg:96.40ms
step:975/1750 train_time:93988ms step_avg:96.40ms
step:976/1750 train_time:94088ms step_avg:96.40ms
step:977/1750 train_time:94188ms step_avg:96.41ms
step:978/1750 train_time:94287ms step_avg:96.41ms
step:979/1750 train_time:94387ms step_avg:96.41ms
step:980/1750 train_time:94485ms step_avg:96.41ms
step:981/1750 train_time:94585ms step_avg:96.42ms
step:982/1750 train_time:94684ms step_avg:96.42ms
step:983/1750 train_time:94784ms step_avg:96.42ms
step:984/1750 train_time:94884ms step_avg:96.43ms
step:985/1750 train_time:94984ms step_avg:96.43ms
step:986/1750 train_time:95084ms step_avg:96.43ms
step:987/1750 train_time:95185ms step_avg:96.44ms
step:988/1750 train_time:95285ms step_avg:96.44ms
step:989/1750 train_time:95385ms step_avg:96.45ms
step:990/1750 train_time:95485ms step_avg:96.45ms
step:991/1750 train_time:95584ms step_avg:96.45ms
step:992/1750 train_time:95685ms step_avg:96.46ms
step:993/1750 train_time:95784ms step_avg:96.46ms
step:994/1750 train_time:95883ms step_avg:96.46ms
step:995/1750 train_time:95984ms step_avg:96.47ms
step:996/1750 train_time:96083ms step_avg:96.47ms
step:997/1750 train_time:96183ms step_avg:96.47ms
step:998/1750 train_time:96282ms step_avg:96.48ms
step:999/1750 train_time:96382ms step_avg:96.48ms
step:1000/1750 train_time:96481ms step_avg:96.48ms
step:1000/1750 val_loss:3.5067 train_time:96570ms step_avg:96.57ms
step:1001/1750 train_time:96590ms step_avg:96.49ms
step:1002/1750 train_time:96687ms step_avg:96.49ms
step:1003/1750 train_time:96787ms step_avg:96.50ms
step:1004/1750 train_time:96887ms step_avg:96.50ms
step:1005/1750 train_time:96986ms step_avg:96.50ms
step:1006/1750 train_time:97084ms step_avg:96.51ms
step:1007/1750 train_time:97182ms step_avg:96.51ms
step:1008/1750 train_time:97281ms step_avg:96.51ms
step:1009/1750 train_time:97380ms step_avg:96.51ms
step:1010/1750 train_time:97479ms step_avg:96.51ms
step:1011/1750 train_time:97581ms step_avg:96.52ms
step:1012/1750 train_time:97683ms step_avg:96.52ms
step:1013/1750 train_time:97783ms step_avg:96.53ms
step:1014/1750 train_time:97883ms step_avg:96.53ms
step:1015/1750 train_time:97982ms step_avg:96.53ms
step:1016/1750 train_time:98081ms step_avg:96.54ms
step:1017/1750 train_time:98180ms step_avg:96.54ms
step:1018/1750 train_time:98278ms step_avg:96.54ms
step:1019/1750 train_time:98376ms step_avg:96.54ms
step:1020/1750 train_time:98474ms step_avg:96.54ms
step:1021/1750 train_time:98575ms step_avg:96.55ms
step:1022/1750 train_time:98675ms step_avg:96.55ms
step:1023/1750 train_time:98776ms step_avg:96.56ms
step:1024/1750 train_time:98877ms step_avg:96.56ms
step:1025/1750 train_time:98978ms step_avg:96.56ms
step:1026/1750 train_time:99077ms step_avg:96.57ms
step:1027/1750 train_time:99176ms step_avg:96.57ms
step:1028/1750 train_time:99276ms step_avg:96.57ms
step:1029/1750 train_time:99376ms step_avg:96.58ms
step:1030/1750 train_time:99475ms step_avg:96.58ms
step:1031/1750 train_time:99574ms step_avg:96.58ms
step:1032/1750 train_time:99674ms step_avg:96.58ms
step:1033/1750 train_time:99774ms step_avg:96.59ms
step:1034/1750 train_time:99875ms step_avg:96.59ms
step:1035/1750 train_time:99976ms step_avg:96.60ms
step:1036/1750 train_time:100076ms step_avg:96.60ms
step:1037/1750 train_time:100176ms step_avg:96.60ms
step:1038/1750 train_time:100275ms step_avg:96.60ms
step:1039/1750 train_time:100373ms step_avg:96.61ms
step:1040/1750 train_time:100473ms step_avg:96.61ms
step:1041/1750 train_time:100573ms step_avg:96.61ms
step:1042/1750 train_time:100673ms step_avg:96.62ms
step:1043/1750 train_time:100774ms step_avg:96.62ms
step:1044/1750 train_time:100875ms step_avg:96.62ms
step:1045/1750 train_time:100974ms step_avg:96.63ms
step:1046/1750 train_time:101075ms step_avg:96.63ms
step:1047/1750 train_time:101175ms step_avg:96.63ms
step:1048/1750 train_time:101274ms step_avg:96.64ms
step:1049/1750 train_time:101373ms step_avg:96.64ms
step:1050/1750 train_time:101473ms step_avg:96.64ms
step:1051/1750 train_time:101574ms step_avg:96.64ms
step:1052/1750 train_time:101674ms step_avg:96.65ms
step:1053/1750 train_time:101774ms step_avg:96.65ms
step:1054/1750 train_time:101874ms step_avg:96.65ms
step:1055/1750 train_time:101974ms step_avg:96.66ms
step:1056/1750 train_time:102074ms step_avg:96.66ms
step:1057/1750 train_time:102173ms step_avg:96.66ms
step:1058/1750 train_time:102273ms step_avg:96.67ms
step:1059/1750 train_time:102373ms step_avg:96.67ms
step:1060/1750 train_time:102472ms step_avg:96.67ms
step:1061/1750 train_time:102571ms step_avg:96.67ms
step:1062/1750 train_time:102671ms step_avg:96.68ms
step:1063/1750 train_time:102771ms step_avg:96.68ms
step:1064/1750 train_time:102872ms step_avg:96.68ms
step:1065/1750 train_time:102972ms step_avg:96.69ms
step:1066/1750 train_time:103072ms step_avg:96.69ms
step:1067/1750 train_time:103173ms step_avg:96.69ms
step:1068/1750 train_time:103273ms step_avg:96.70ms
step:1069/1750 train_time:103373ms step_avg:96.70ms
step:1070/1750 train_time:103474ms step_avg:96.70ms
step:1071/1750 train_time:103574ms step_avg:96.71ms
step:1072/1750 train_time:103674ms step_avg:96.71ms
step:1073/1750 train_time:103774ms step_avg:96.71ms
step:1074/1750 train_time:103875ms step_avg:96.72ms
step:1075/1750 train_time:103975ms step_avg:96.72ms
step:1076/1750 train_time:104075ms step_avg:96.72ms
step:1077/1750 train_time:104175ms step_avg:96.73ms
step:1078/1750 train_time:104276ms step_avg:96.73ms
step:1079/1750 train_time:104376ms step_avg:96.73ms
step:1080/1750 train_time:104475ms step_avg:96.74ms
step:1081/1750 train_time:104575ms step_avg:96.74ms
step:1082/1750 train_time:104674ms step_avg:96.74ms
step:1083/1750 train_time:104775ms step_avg:96.74ms
step:1084/1750 train_time:104874ms step_avg:96.75ms
step:1085/1750 train_time:104974ms step_avg:96.75ms
step:1086/1750 train_time:105074ms step_avg:96.75ms
step:1087/1750 train_time:105173ms step_avg:96.76ms
step:1088/1750 train_time:105274ms step_avg:96.76ms
step:1089/1750 train_time:105373ms step_avg:96.76ms
step:1090/1750 train_time:105474ms step_avg:96.76ms
step:1091/1750 train_time:105573ms step_avg:96.77ms
step:1092/1750 train_time:105674ms step_avg:96.77ms
step:1093/1750 train_time:105774ms step_avg:96.77ms
step:1094/1750 train_time:105875ms step_avg:96.78ms
step:1095/1750 train_time:105974ms step_avg:96.78ms
step:1096/1750 train_time:106075ms step_avg:96.78ms
step:1097/1750 train_time:106175ms step_avg:96.79ms
step:1098/1750 train_time:106275ms step_avg:96.79ms
step:1099/1750 train_time:106374ms step_avg:96.79ms
step:1100/1750 train_time:106474ms step_avg:96.79ms
step:1101/1750 train_time:106573ms step_avg:96.80ms
step:1102/1750 train_time:106673ms step_avg:96.80ms
step:1103/1750 train_time:106772ms step_avg:96.80ms
step:1104/1750 train_time:106872ms step_avg:96.80ms
step:1105/1750 train_time:106972ms step_avg:96.81ms
step:1106/1750 train_time:107073ms step_avg:96.81ms
step:1107/1750 train_time:107173ms step_avg:96.81ms
step:1108/1750 train_time:107273ms step_avg:96.82ms
step:1109/1750 train_time:107373ms step_avg:96.82ms
step:1110/1750 train_time:107473ms step_avg:96.82ms
step:1111/1750 train_time:107573ms step_avg:96.82ms
step:1112/1750 train_time:107673ms step_avg:96.83ms
step:1113/1750 train_time:107773ms step_avg:96.83ms
step:1114/1750 train_time:107873ms step_avg:96.83ms
step:1115/1750 train_time:107972ms step_avg:96.84ms
step:1116/1750 train_time:108072ms step_avg:96.84ms
step:1117/1750 train_time:108172ms step_avg:96.84ms
step:1118/1750 train_time:108273ms step_avg:96.85ms
step:1119/1750 train_time:108373ms step_avg:96.85ms
step:1120/1750 train_time:108473ms step_avg:96.85ms
step:1121/1750 train_time:108572ms step_avg:96.85ms
step:1122/1750 train_time:108673ms step_avg:96.86ms
step:1123/1750 train_time:108773ms step_avg:96.86ms
step:1124/1750 train_time:108873ms step_avg:96.86ms
step:1125/1750 train_time:108972ms step_avg:96.86ms
step:1125/1750 val_loss:3.4551 train_time:109061ms step_avg:96.94ms
step:1126/1750 train_time:109083ms step_avg:96.88ms
step:1127/1750 train_time:109181ms step_avg:96.88ms
step:1128/1750 train_time:109283ms step_avg:96.88ms
step:1129/1750 train_time:109383ms step_avg:96.89ms
step:1130/1750 train_time:109482ms step_avg:96.89ms
step:1131/1750 train_time:109581ms step_avg:96.89ms
step:1132/1750 train_time:109680ms step_avg:96.89ms
step:1133/1750 train_time:109779ms step_avg:96.89ms
step:1134/1750 train_time:109878ms step_avg:96.89ms
step:1135/1750 train_time:109977ms step_avg:96.90ms
step:1136/1750 train_time:110078ms step_avg:96.90ms
step:1137/1750 train_time:110180ms step_avg:96.90ms
step:1138/1750 train_time:110281ms step_avg:96.91ms
step:1139/1750 train_time:110381ms step_avg:96.91ms
step:1140/1750 train_time:110481ms step_avg:96.91ms
step:1141/1750 train_time:110580ms step_avg:96.92ms
step:1142/1750 train_time:110679ms step_avg:96.92ms
step:1143/1750 train_time:110777ms step_avg:96.92ms
step:1144/1750 train_time:110875ms step_avg:96.92ms
step:1145/1750 train_time:110974ms step_avg:96.92ms
step:1146/1750 train_time:111074ms step_avg:96.92ms
step:1147/1750 train_time:111175ms step_avg:96.93ms
step:1148/1750 train_time:111275ms step_avg:96.93ms
step:1149/1750 train_time:111376ms step_avg:96.93ms
step:1150/1750 train_time:111476ms step_avg:96.94ms
step:1151/1750 train_time:111575ms step_avg:96.94ms
step:1152/1750 train_time:111676ms step_avg:96.94ms
step:1153/1750 train_time:111774ms step_avg:96.94ms
step:1154/1750 train_time:111872ms step_avg:96.94ms
step:1155/1750 train_time:111971ms step_avg:96.94ms
step:1156/1750 train_time:112071ms step_avg:96.95ms
step:1157/1750 train_time:112171ms step_avg:96.95ms
step:1158/1750 train_time:112271ms step_avg:96.95ms
step:1159/1750 train_time:112618ms step_avg:97.17ms
step:1160/1750 train_time:112717ms step_avg:97.17ms
step:1161/1750 train_time:112815ms step_avg:97.17ms
step:1162/1750 train_time:112913ms step_avg:97.17ms
step:1163/1750 train_time:113013ms step_avg:97.17ms
step:1164/1750 train_time:113111ms step_avg:97.17ms
step:1165/1750 train_time:113472ms step_avg:97.40ms
step:1166/1750 train_time:113568ms step_avg:97.40ms
step:1167/1750 train_time:113666ms step_avg:97.40ms
step:1168/1750 train_time:113765ms step_avg:97.40ms
step:1169/1750 train_time:114128ms step_avg:97.63ms
step:1170/1750 train_time:114227ms step_avg:97.63ms
step:1171/1750 train_time:114326ms step_avg:97.63ms
step:1172/1750 train_time:114426ms step_avg:97.63ms
step:1173/1750 train_time:114525ms step_avg:97.63ms
step:1174/1750 train_time:114625ms step_avg:97.64ms
step:1175/1750 train_time:114980ms step_avg:97.86ms
step:1176/1750 train_time:115078ms step_avg:97.86ms
step:1177/1750 train_time:115177ms step_avg:97.86ms
step:1178/1750 train_time:115277ms step_avg:97.86ms
step:1179/1750 train_time:115378ms step_avg:97.86ms
step:1180/1750 train_time:115478ms step_avg:97.86ms
step:1181/1750 train_time:115577ms step_avg:97.86ms
step:1182/1750 train_time:115677ms step_avg:97.87ms
step:1183/1750 train_time:115777ms step_avg:97.87ms
step:1184/1750 train_time:115881ms step_avg:97.87ms
step:1185/1750 train_time:115988ms step_avg:97.88ms
step:1186/1750 train_time:116089ms step_avg:97.88ms
step:1187/1750 train_time:116190ms step_avg:97.89ms
step:1188/1750 train_time:116291ms step_avg:97.89ms
step:1189/1750 train_time:116390ms step_avg:97.89ms
step:1190/1750 train_time:116490ms step_avg:97.89ms
step:1191/1750 train_time:116591ms step_avg:97.89ms
step:1192/1750 train_time:116692ms step_avg:97.90ms
step:1193/1750 train_time:116792ms step_avg:97.90ms
step:1194/1750 train_time:116894ms step_avg:97.90ms
step:1195/1750 train_time:116996ms step_avg:97.90ms
step:1196/1750 train_time:117096ms step_avg:97.91ms
step:1197/1750 train_time:117198ms step_avg:97.91ms
step:1198/1750 train_time:117299ms step_avg:97.91ms
step:1199/1750 train_time:117399ms step_avg:97.91ms
step:1200/1750 train_time:117498ms step_avg:97.92ms
step:1201/1750 train_time:117599ms step_avg:97.92ms
step:1202/1750 train_time:117700ms step_avg:97.92ms
step:1203/1750 train_time:117801ms step_avg:97.92ms
step:1204/1750 train_time:117903ms step_avg:97.93ms
step:1205/1750 train_time:118005ms step_avg:97.93ms
step:1206/1750 train_time:118106ms step_avg:97.93ms
step:1207/1750 train_time:118207ms step_avg:97.93ms
step:1208/1750 train_time:118307ms step_avg:97.94ms
step:1209/1750 train_time:118407ms step_avg:97.94ms
step:1210/1750 train_time:118508ms step_avg:97.94ms
step:1211/1750 train_time:118610ms step_avg:97.94ms
step:1212/1750 train_time:118711ms step_avg:97.95ms
step:1213/1750 train_time:118812ms step_avg:97.95ms
step:1214/1750 train_time:118912ms step_avg:97.95ms
step:1215/1750 train_time:119015ms step_avg:97.95ms
step:1216/1750 train_time:119117ms step_avg:97.96ms
step:1217/1750 train_time:119218ms step_avg:97.96ms
step:1218/1750 train_time:119318ms step_avg:97.96ms
step:1219/1750 train_time:119419ms step_avg:97.96ms
step:1220/1750 train_time:119809ms step_avg:98.20ms
step:1221/1750 train_time:119907ms step_avg:98.20ms
step:1222/1750 train_time:120007ms step_avg:98.21ms
step:1223/1750 train_time:120106ms step_avg:98.21ms
step:1224/1750 train_time:120205ms step_avg:98.21ms
step:1225/1750 train_time:120304ms step_avg:98.21ms
step:1226/1750 train_time:120403ms step_avg:98.21ms
step:1227/1750 train_time:120503ms step_avg:98.21ms
step:1228/1750 train_time:120602ms step_avg:98.21ms
step:1229/1750 train_time:120708ms step_avg:98.22ms
step:1230/1750 train_time:121141ms step_avg:98.49ms
step:1231/1750 train_time:121204ms step_avg:98.46ms
step:1232/1750 train_time:121303ms step_avg:98.46ms
step:1233/1750 train_time:121401ms step_avg:98.46ms
step:1234/1750 train_time:121503ms step_avg:98.46ms
step:1235/1750 train_time:121602ms step_avg:98.46ms
step:1236/1750 train_time:121702ms step_avg:98.46ms
step:1237/1750 train_time:121801ms step_avg:98.47ms
step:1238/1750 train_time:121901ms step_avg:98.47ms
step:1239/1750 train_time:122001ms step_avg:98.47ms
step:1240/1750 train_time:122107ms step_avg:98.47ms
step:1241/1750 train_time:122212ms step_avg:98.48ms
step:1242/1750 train_time:122313ms step_avg:98.48ms
step:1243/1750 train_time:122414ms step_avg:98.48ms
step:1244/1750 train_time:122514ms step_avg:98.48ms
step:1245/1750 train_time:122614ms step_avg:98.49ms
step:1246/1750 train_time:122715ms step_avg:98.49ms
step:1247/1750 train_time:122814ms step_avg:98.49ms
step:1248/1750 train_time:122914ms step_avg:98.49ms
step:1249/1750 train_time:123015ms step_avg:98.49ms
step:1250/1750 train_time:123116ms step_avg:98.49ms
step:1250/1750 val_loss:3.4114 train_time:123207ms step_avg:98.57ms
step:1251/1750 train_time:123230ms step_avg:98.51ms
step:1252/1750 train_time:123331ms step_avg:98.51ms
step:1253/1750 train_time:123431ms step_avg:98.51ms
step:1254/1750 train_time:123531ms step_avg:98.51ms
step:1255/1750 train_time:123631ms step_avg:98.51ms
step:1256/1750 train_time:123730ms step_avg:98.51ms
step:1257/1750 train_time:123829ms step_avg:98.51ms
step:1258/1750 train_time:123929ms step_avg:98.51ms
step:1259/1750 train_time:124030ms step_avg:98.51ms
step:1260/1750 train_time:124132ms step_avg:98.52ms
step:1261/1750 train_time:124237ms step_avg:98.52ms
step:1262/1750 train_time:124340ms step_avg:98.53ms
step:1263/1750 train_time:124440ms step_avg:98.53ms
step:1264/1750 train_time:124539ms step_avg:98.53ms
step:1265/1750 train_time:124639ms step_avg:98.53ms
step:1266/1750 train_time:124739ms step_avg:98.53ms
step:1267/1750 train_time:124839ms step_avg:98.53ms
step:1268/1750 train_time:124940ms step_avg:98.53ms
step:1269/1750 train_time:125041ms step_avg:98.54ms
step:1270/1750 train_time:125142ms step_avg:98.54ms
step:1271/1750 train_time:125245ms step_avg:98.54ms
step:1272/1750 train_time:125345ms step_avg:98.54ms
step:1273/1750 train_time:125446ms step_avg:98.54ms
step:1274/1750 train_time:125547ms step_avg:98.55ms
step:1275/1750 train_time:125648ms step_avg:98.55ms
step:1276/1750 train_time:125750ms step_avg:98.55ms
step:1277/1750 train_time:125850ms step_avg:98.55ms
step:1278/1750 train_time:125950ms step_avg:98.55ms
step:1279/1750 train_time:126050ms step_avg:98.55ms
step:1280/1750 train_time:126151ms step_avg:98.56ms
step:1281/1750 train_time:126253ms step_avg:98.56ms
step:1282/1750 train_time:126355ms step_avg:98.56ms
step:1283/1750 train_time:126455ms step_avg:98.56ms
step:1284/1750 train_time:126556ms step_avg:98.56ms
step:1285/1750 train_time:126655ms step_avg:98.56ms
step:1286/1750 train_time:126756ms step_avg:98.57ms
step:1287/1750 train_time:126856ms step_avg:98.57ms
step:1288/1750 train_time:126956ms step_avg:98.57ms
step:1289/1750 train_time:127056ms step_avg:98.57ms
step:1290/1750 train_time:127157ms step_avg:98.57ms
step:1291/1750 train_time:127258ms step_avg:98.57ms
step:1292/1750 train_time:127359ms step_avg:98.57ms
step:1293/1750 train_time:127460ms step_avg:98.58ms
step:1294/1750 train_time:127562ms step_avg:98.58ms
step:1295/1750 train_time:127663ms step_avg:98.58ms
step:1296/1750 train_time:127764ms step_avg:98.58ms
step:1297/1750 train_time:127865ms step_avg:98.59ms
step:1298/1750 train_time:127966ms step_avg:98.59ms
step:1299/1750 train_time:128067ms step_avg:98.59ms
step:1300/1750 train_time:128167ms step_avg:98.59ms
step:1301/1750 train_time:128269ms step_avg:98.59ms
step:1302/1750 train_time:128371ms step_avg:98.60ms
step:1303/1750 train_time:128472ms step_avg:98.60ms
step:1304/1750 train_time:128573ms step_avg:98.60ms
step:1305/1750 train_time:128676ms step_avg:98.60ms
step:1306/1750 train_time:128777ms step_avg:98.60ms
step:1307/1750 train_time:128878ms step_avg:98.61ms
step:1308/1750 train_time:128978ms step_avg:98.61ms
step:1309/1750 train_time:129079ms step_avg:98.61ms
step:1310/1750 train_time:129180ms step_avg:98.61ms
step:1311/1750 train_time:129281ms step_avg:98.61ms
step:1312/1750 train_time:129383ms step_avg:98.61ms
step:1313/1750 train_time:129485ms step_avg:98.62ms
step:1314/1750 train_time:129587ms step_avg:98.62ms
step:1315/1750 train_time:129688ms step_avg:98.62ms
step:1316/1750 train_time:129789ms step_avg:98.62ms
step:1317/1750 train_time:129889ms step_avg:98.62ms
step:1318/1750 train_time:129989ms step_avg:98.63ms
step:1319/1750 train_time:130090ms step_avg:98.63ms
step:1320/1750 train_time:130193ms step_avg:98.63ms
step:1321/1750 train_time:130294ms step_avg:98.63ms
step:1322/1750 train_time:130395ms step_avg:98.63ms
step:1323/1750 train_time:130496ms step_avg:98.64ms
step:1324/1750 train_time:130598ms step_avg:98.64ms
step:1325/1750 train_time:130701ms step_avg:98.64ms
step:1326/1750 train_time:130802ms step_avg:98.64ms
step:1327/1750 train_time:130904ms step_avg:98.65ms
step:1328/1750 train_time:131004ms step_avg:98.65ms
step:1329/1750 train_time:131105ms step_avg:98.65ms
step:1330/1750 train_time:131206ms step_avg:98.65ms
step:1331/1750 train_time:131308ms step_avg:98.65ms
step:1332/1750 train_time:131409ms step_avg:98.66ms
step:1333/1750 train_time:131510ms step_avg:98.66ms
step:1334/1750 train_time:131611ms step_avg:98.66ms
step:1335/1750 train_time:131712ms step_avg:98.66ms
step:1336/1750 train_time:131812ms step_avg:98.66ms
step:1337/1750 train_time:131915ms step_avg:98.66ms
step:1338/1750 train_time:132015ms step_avg:98.67ms
step:1339/1750 train_time:132115ms step_avg:98.67ms
step:1340/1750 train_time:132216ms step_avg:98.67ms
step:1341/1750 train_time:132317ms step_avg:98.67ms
step:1342/1750 train_time:132418ms step_avg:98.67ms
step:1343/1750 train_time:132519ms step_avg:98.67ms
step:1344/1750 train_time:132622ms step_avg:98.68ms
step:1345/1750 train_time:132722ms step_avg:98.68ms
step:1346/1750 train_time:132825ms step_avg:98.68ms
step:1347/1750 train_time:132928ms step_avg:98.68ms
step:1348/1750 train_time:133029ms step_avg:98.69ms
step:1349/1750 train_time:133129ms step_avg:98.69ms
step:1350/1750 train_time:133231ms step_avg:98.69ms
step:1351/1750 train_time:133332ms step_avg:98.69ms
step:1352/1750 train_time:133433ms step_avg:98.69ms
step:1353/1750 train_time:133534ms step_avg:98.69ms
step:1354/1750 train_time:133635ms step_avg:98.70ms
step:1355/1750 train_time:133736ms step_avg:98.70ms
step:1356/1750 train_time:133838ms step_avg:98.70ms
step:1357/1750 train_time:133938ms step_avg:98.70ms
step:1358/1750 train_time:134038ms step_avg:98.70ms
step:1359/1750 train_time:134140ms step_avg:98.70ms
step:1360/1750 train_time:134241ms step_avg:98.71ms
step:1361/1750 train_time:134343ms step_avg:98.71ms
step:1362/1750 train_time:134444ms step_avg:98.71ms
step:1363/1750 train_time:134547ms step_avg:98.71ms
step:1364/1750 train_time:134649ms step_avg:98.72ms
step:1365/1750 train_time:134750ms step_avg:98.72ms
step:1366/1750 train_time:134851ms step_avg:98.72ms
step:1367/1750 train_time:134952ms step_avg:98.72ms
step:1368/1750 train_time:135055ms step_avg:98.72ms
step:1369/1750 train_time:135155ms step_avg:98.73ms
step:1370/1750 train_time:135255ms step_avg:98.73ms
step:1371/1750 train_time:135356ms step_avg:98.73ms
step:1372/1750 train_time:135456ms step_avg:98.73ms
step:1373/1750 train_time:135557ms step_avg:98.73ms
step:1374/1750 train_time:135658ms step_avg:98.73ms
step:1375/1750 train_time:135759ms step_avg:98.73ms
step:1375/1750 val_loss:3.3711 train_time:135849ms step_avg:98.80ms
step:1376/1750 train_time:135869ms step_avg:98.74ms
step:1377/1750 train_time:135971ms step_avg:98.74ms
step:1378/1750 train_time:136073ms step_avg:98.75ms
step:1379/1750 train_time:136174ms step_avg:98.75ms
step:1380/1750 train_time:136275ms step_avg:98.75ms
step:1381/1750 train_time:136375ms step_avg:98.75ms
step:1382/1750 train_time:136473ms step_avg:98.75ms
step:1383/1750 train_time:136573ms step_avg:98.75ms
step:1384/1750 train_time:136672ms step_avg:98.75ms
step:1385/1750 train_time:136771ms step_avg:98.75ms
step:1386/1750 train_time:136875ms step_avg:98.76ms
step:1387/1750 train_time:136978ms step_avg:98.76ms
step:1388/1750 train_time:137079ms step_avg:98.76ms
step:1389/1750 train_time:137180ms step_avg:98.76ms
step:1390/1750 train_time:137281ms step_avg:98.76ms
step:1391/1750 train_time:137381ms step_avg:98.76ms
step:1392/1750 train_time:137482ms step_avg:98.77ms
step:1393/1750 train_time:137584ms step_avg:98.77ms
step:1394/1750 train_time:137684ms step_avg:98.77ms
step:1395/1750 train_time:137785ms step_avg:98.77ms
step:1396/1750 train_time:137888ms step_avg:98.77ms
step:1397/1750 train_time:137991ms step_avg:98.78ms
step:1398/1750 train_time:138093ms step_avg:98.78ms
step:1399/1750 train_time:138195ms step_avg:98.78ms
step:1400/1750 train_time:138296ms step_avg:98.78ms
step:1401/1750 train_time:138395ms step_avg:98.78ms
step:1402/1750 train_time:138495ms step_avg:98.78ms
step:1403/1750 train_time:138596ms step_avg:98.79ms
step:1404/1750 train_time:138697ms step_avg:98.79ms
step:1405/1750 train_time:138798ms step_avg:98.79ms
step:1406/1750 train_time:138900ms step_avg:98.79ms
step:1407/1750 train_time:139002ms step_avg:98.79ms
step:1408/1750 train_time:139103ms step_avg:98.80ms
step:1409/1750 train_time:139206ms step_avg:98.80ms
step:1410/1750 train_time:139308ms step_avg:98.80ms
step:1411/1750 train_time:139409ms step_avg:98.80ms
step:1412/1750 train_time:139509ms step_avg:98.80ms
step:1413/1750 train_time:139610ms step_avg:98.80ms
step:1414/1750 train_time:139711ms step_avg:98.81ms
step:1415/1750 train_time:139812ms step_avg:98.81ms
step:1416/1750 train_time:139912ms step_avg:98.81ms
step:1417/1750 train_time:140012ms step_avg:98.81ms
step:1418/1750 train_time:140113ms step_avg:98.81ms
step:1419/1750 train_time:140214ms step_avg:98.81ms
step:1420/1750 train_time:140315ms step_avg:98.81ms
step:1421/1750 train_time:140416ms step_avg:98.81ms
step:1422/1750 train_time:140516ms step_avg:98.82ms
step:1423/1750 train_time:140617ms step_avg:98.82ms
step:1424/1750 train_time:140720ms step_avg:98.82ms
step:1425/1750 train_time:140821ms step_avg:98.82ms
step:1426/1750 train_time:140923ms step_avg:98.82ms
step:1427/1750 train_time:141025ms step_avg:98.83ms
step:1428/1750 train_time:141127ms step_avg:98.83ms
step:1429/1750 train_time:141229ms step_avg:98.83ms
step:1430/1750 train_time:141330ms step_avg:98.83ms
step:1431/1750 train_time:141432ms step_avg:98.83ms
step:1432/1750 train_time:141535ms step_avg:98.84ms
step:1433/1750 train_time:141637ms step_avg:98.84ms
step:1434/1750 train_time:141738ms step_avg:98.84ms
step:1435/1750 train_time:141840ms step_avg:98.84ms
step:1436/1750 train_time:141942ms step_avg:98.85ms
step:1437/1750 train_time:142046ms step_avg:98.85ms
step:1438/1750 train_time:142147ms step_avg:98.85ms
step:1439/1750 train_time:142251ms step_avg:98.85ms
step:1440/1750 train_time:142354ms step_avg:98.86ms
step:1441/1750 train_time:142456ms step_avg:98.86ms
step:1442/1750 train_time:142557ms step_avg:98.86ms
step:1443/1750 train_time:142658ms step_avg:98.86ms
step:1444/1750 train_time:142759ms step_avg:98.86ms
step:1445/1750 train_time:142861ms step_avg:98.87ms
step:1446/1750 train_time:142962ms step_avg:98.87ms
step:1447/1750 train_time:143064ms step_avg:98.87ms
step:1448/1750 train_time:143169ms step_avg:98.87ms
step:1449/1750 train_time:143270ms step_avg:98.88ms
step:1450/1750 train_time:143371ms step_avg:98.88ms
step:1451/1750 train_time:143473ms step_avg:98.88ms
step:1452/1750 train_time:143574ms step_avg:98.88ms
step:1453/1750 train_time:143677ms step_avg:98.88ms
step:1454/1750 train_time:143779ms step_avg:98.89ms
step:1455/1750 train_time:143880ms step_avg:98.89ms
step:1456/1750 train_time:143980ms step_avg:98.89ms
step:1457/1750 train_time:144083ms step_avg:98.89ms
step:1458/1750 train_time:144187ms step_avg:98.89ms
step:1459/1750 train_time:144290ms step_avg:98.90ms
step:1460/1750 train_time:144391ms step_avg:98.90ms
step:1461/1750 train_time:144493ms step_avg:98.90ms
step:1462/1750 train_time:144595ms step_avg:98.90ms
step:1463/1750 train_time:144696ms step_avg:98.90ms
step:1464/1750 train_time:144797ms step_avg:98.91ms
step:1465/1750 train_time:144899ms step_avg:98.91ms
step:1466/1750 train_time:145000ms step_avg:98.91ms
step:1467/1750 train_time:145103ms step_avg:98.91ms
step:1468/1750 train_time:145206ms step_avg:98.91ms
step:1469/1750 train_time:145308ms step_avg:98.92ms
step:1470/1750 train_time:145410ms step_avg:98.92ms
step:1471/1750 train_time:145512ms step_avg:98.92ms
step:1472/1750 train_time:145614ms step_avg:98.92ms
step:1473/1750 train_time:145716ms step_avg:98.92ms
step:1474/1750 train_time:145817ms step_avg:98.93ms
step:1475/1750 train_time:145918ms step_avg:98.93ms
step:1476/1750 train_time:146021ms step_avg:98.93ms
step:1477/1750 train_time:146124ms step_avg:98.93ms
step:1478/1750 train_time:146227ms step_avg:98.94ms
step:1479/1750 train_time:146328ms step_avg:98.94ms
step:1480/1750 train_time:146431ms step_avg:98.94ms
step:1481/1750 train_time:146532ms step_avg:98.94ms
step:1482/1750 train_time:146634ms step_avg:98.94ms
step:1483/1750 train_time:146735ms step_avg:98.94ms
step:1484/1750 train_time:146838ms step_avg:98.95ms
step:1485/1750 train_time:146940ms step_avg:98.95ms
step:1486/1750 train_time:147042ms step_avg:98.95ms
step:1487/1750 train_time:147144ms step_avg:98.95ms
step:1488/1750 train_time:147248ms step_avg:98.96ms
step:1489/1750 train_time:147350ms step_avg:98.96ms
step:1490/1750 train_time:147452ms step_avg:98.96ms
step:1491/1750 train_time:147553ms step_avg:98.96ms
step:1492/1750 train_time:147654ms step_avg:98.96ms
step:1493/1750 train_time:147756ms step_avg:98.97ms
step:1494/1750 train_time:147858ms step_avg:98.97ms
step:1495/1750 train_time:147959ms step_avg:98.97ms
step:1496/1750 train_time:148060ms step_avg:98.97ms
step:1497/1750 train_time:148161ms step_avg:98.97ms
step:1498/1750 train_time:148265ms step_avg:98.98ms
step:1499/1750 train_time:148368ms step_avg:98.98ms
step:1500/1750 train_time:148469ms step_avg:98.98ms
step:1500/1750 val_loss:3.3352 train_time:148559ms step_avg:99.04ms
step:1501/1750 train_time:148579ms step_avg:98.99ms
step:1502/1750 train_time:148679ms step_avg:98.99ms
step:1503/1750 train_time:148779ms step_avg:98.99ms
step:1504/1750 train_time:148880ms step_avg:98.99ms
step:1505/1750 train_time:148981ms step_avg:98.99ms
step:1506/1750 train_time:149082ms step_avg:98.99ms
step:1507/1750 train_time:149184ms step_avg:98.99ms
step:1508/1750 train_time:149284ms step_avg:98.99ms
step:1509/1750 train_time:149386ms step_avg:99.00ms
step:1510/1750 train_time:149489ms step_avg:99.00ms
step:1511/1750 train_time:149595ms step_avg:99.00ms
step:1512/1750 train_time:149700ms step_avg:99.01ms
step:1513/1750 train_time:149801ms step_avg:99.01ms
step:1514/1750 train_time:149902ms step_avg:99.01ms
step:1515/1750 train_time:150006ms step_avg:99.01ms
step:1516/1750 train_time:150107ms step_avg:99.02ms
step:1517/1750 train_time:150208ms step_avg:99.02ms
step:1518/1750 train_time:150309ms step_avg:99.02ms
step:1519/1750 train_time:150411ms step_avg:99.02ms
step:1520/1750 train_time:150513ms step_avg:99.02ms
step:1521/1750 train_time:150615ms step_avg:99.02ms
step:1522/1750 train_time:150718ms step_avg:99.03ms
step:1523/1750 train_time:150820ms step_avg:99.03ms
step:1524/1750 train_time:150923ms step_avg:99.03ms
step:1525/1750 train_time:151025ms step_avg:99.03ms
step:1526/1750 train_time:151126ms step_avg:99.03ms
step:1527/1750 train_time:151227ms step_avg:99.04ms
step:1528/1750 train_time:151333ms step_avg:99.04ms
step:1529/1750 train_time:151434ms step_avg:99.04ms
step:1530/1750 train_time:151537ms step_avg:99.04ms
step:1531/1750 train_time:151639ms step_avg:99.05ms
step:1532/1750 train_time:151741ms step_avg:99.05ms
step:1533/1750 train_time:151842ms step_avg:99.05ms
step:1534/1750 train_time:151943ms step_avg:99.05ms
step:1535/1750 train_time:152045ms step_avg:99.05ms
step:1536/1750 train_time:152145ms step_avg:99.05ms
step:1537/1750 train_time:152248ms step_avg:99.06ms
step:1538/1750 train_time:152348ms step_avg:99.06ms
step:1539/1750 train_time:152451ms step_avg:99.06ms
step:1540/1750 train_time:152555ms step_avg:99.06ms
step:1541/1750 train_time:152658ms step_avg:99.06ms
step:1542/1750 train_time:152762ms step_avg:99.07ms
step:1543/1750 train_time:152863ms step_avg:99.07ms
step:1544/1750 train_time:152965ms step_avg:99.07ms
step:1545/1750 train_time:153066ms step_avg:99.07ms
step:1546/1750 train_time:153167ms step_avg:99.07ms
step:1547/1750 train_time:153270ms step_avg:99.08ms
step:1548/1750 train_time:153371ms step_avg:99.08ms
step:1549/1750 train_time:153474ms step_avg:99.08ms
step:1550/1750 train_time:153576ms step_avg:99.08ms
step:1551/1750 train_time:153679ms step_avg:99.08ms
step:1552/1750 train_time:153782ms step_avg:99.09ms
step:1553/1750 train_time:153884ms step_avg:99.09ms
step:1554/1750 train_time:153985ms step_avg:99.09ms
step:1555/1750 train_time:154086ms step_avg:99.09ms
step:1556/1750 train_time:154189ms step_avg:99.09ms
step:1557/1750 train_time:154291ms step_avg:99.10ms
step:1558/1750 train_time:154395ms step_avg:99.10ms
step:1559/1750 train_time:154497ms step_avg:99.10ms
step:1560/1750 train_time:154598ms step_avg:99.10ms
step:1561/1750 train_time:154700ms step_avg:99.10ms
step:1562/1750 train_time:154803ms step_avg:99.11ms
step:1563/1750 train_time:154908ms step_avg:99.11ms
step:1564/1750 train_time:155009ms step_avg:99.11ms
step:1565/1750 train_time:155110ms step_avg:99.11ms
step:1566/1750 train_time:155212ms step_avg:99.11ms
step:1567/1750 train_time:155313ms step_avg:99.12ms
step:1568/1750 train_time:155415ms step_avg:99.12ms
step:1569/1750 train_time:155516ms step_avg:99.12ms
step:1570/1750 train_time:155619ms step_avg:99.12ms
step:1571/1750 train_time:155721ms step_avg:99.12ms
step:1572/1750 train_time:155822ms step_avg:99.12ms
step:1573/1750 train_time:155925ms step_avg:99.13ms
step:1574/1750 train_time:156027ms step_avg:99.13ms
step:1575/1750 train_time:156129ms step_avg:99.13ms
step:1576/1750 train_time:156232ms step_avg:99.13ms
step:1577/1750 train_time:156336ms step_avg:99.13ms
step:1578/1750 train_time:156437ms step_avg:99.14ms
step:1579/1750 train_time:156539ms step_avg:99.14ms
step:1580/1750 train_time:156641ms step_avg:99.14ms
step:1581/1750 train_time:156743ms step_avg:99.14ms
step:1582/1750 train_time:156844ms step_avg:99.14ms
step:1583/1750 train_time:156947ms step_avg:99.15ms
step:1584/1750 train_time:157050ms step_avg:99.15ms
step:1585/1750 train_time:157151ms step_avg:99.15ms
step:1586/1750 train_time:157254ms step_avg:99.15ms
step:1587/1750 train_time:157355ms step_avg:99.15ms
step:1588/1750 train_time:157457ms step_avg:99.15ms
step:1589/1750 train_time:157559ms step_avg:99.16ms
step:1590/1750 train_time:157660ms step_avg:99.16ms
step:1591/1750 train_time:157762ms step_avg:99.16ms
step:1592/1750 train_time:157864ms step_avg:99.16ms
step:1593/1750 train_time:157966ms step_avg:99.16ms
step:1594/1750 train_time:158073ms step_avg:99.17ms
step:1595/1750 train_time:158174ms step_avg:99.17ms
step:1596/1750 train_time:158276ms step_avg:99.17ms
step:1597/1750 train_time:158377ms step_avg:99.17ms
step:1598/1750 train_time:158479ms step_avg:99.17ms
step:1599/1750 train_time:158580ms step_avg:99.17ms
step:1600/1750 train_time:158682ms step_avg:99.18ms
step:1601/1750 train_time:158784ms step_avg:99.18ms
step:1602/1750 train_time:158886ms step_avg:99.18ms
step:1603/1750 train_time:158987ms step_avg:99.18ms
step:1604/1750 train_time:159089ms step_avg:99.18ms
step:1605/1750 train_time:159193ms step_avg:99.19ms
step:1606/1750 train_time:159295ms step_avg:99.19ms
step:1607/1750 train_time:159396ms step_avg:99.19ms
step:1608/1750 train_time:159497ms step_avg:99.19ms
step:1609/1750 train_time:159599ms step_avg:99.19ms
step:1610/1750 train_time:159700ms step_avg:99.19ms
step:1611/1750 train_time:159803ms step_avg:99.19ms
step:1612/1750 train_time:159905ms step_avg:99.20ms
step:1613/1750 train_time:160007ms step_avg:99.20ms
step:1614/1750 train_time:160108ms step_avg:99.20ms
step:1615/1750 train_time:160210ms step_avg:99.20ms
step:1616/1750 train_time:160313ms step_avg:99.20ms
step:1617/1750 train_time:160416ms step_avg:99.21ms
step:1618/1750 train_time:160518ms step_avg:99.21ms
step:1619/1750 train_time:160619ms step_avg:99.21ms
step:1620/1750 train_time:160722ms step_avg:99.21ms
step:1621/1750 train_time:160823ms step_avg:99.21ms
step:1622/1750 train_time:160925ms step_avg:99.21ms
step:1623/1750 train_time:161027ms step_avg:99.22ms
step:1624/1750 train_time:161130ms step_avg:99.22ms
step:1625/1750 train_time:161233ms step_avg:99.22ms
step:1625/1750 val_loss:3.3054 train_time:161324ms step_avg:99.28ms
step:1626/1750 train_time:161344ms step_avg:99.23ms
step:1627/1750 train_time:161444ms step_avg:99.23ms
step:1628/1750 train_time:161546ms step_avg:99.23ms
step:1629/1750 train_time:161649ms step_avg:99.23ms
step:1630/1750 train_time:161750ms step_avg:99.23ms
step:1631/1750 train_time:161851ms step_avg:99.23ms
step:1632/1750 train_time:161952ms step_avg:99.24ms
step:1633/1750 train_time:162054ms step_avg:99.24ms
step:1634/1750 train_time:162158ms step_avg:99.24ms
step:1635/1750 train_time:162260ms step_avg:99.24ms
step:1636/1750 train_time:162361ms step_avg:99.24ms
step:1637/1750 train_time:162464ms step_avg:99.24ms
step:1638/1750 train_time:162567ms step_avg:99.25ms
step:1639/1750 train_time:162669ms step_avg:99.25ms
step:1640/1750 train_time:162770ms step_avg:99.25ms
step:1641/1750 train_time:162871ms step_avg:99.25ms
step:1642/1750 train_time:162972ms step_avg:99.25ms
step:1643/1750 train_time:163073ms step_avg:99.25ms
step:1644/1750 train_time:163176ms step_avg:99.26ms
step:1645/1750 train_time:163277ms step_avg:99.26ms
step:1646/1750 train_time:163380ms step_avg:99.26ms
step:1647/1750 train_time:163484ms step_avg:99.26ms
step:1648/1750 train_time:163588ms step_avg:99.26ms
step:1649/1750 train_time:163691ms step_avg:99.27ms
step:1650/1750 train_time:163793ms step_avg:99.27ms
step:1651/1750 train_time:163895ms step_avg:99.27ms
step:1652/1750 train_time:163996ms step_avg:99.27ms
step:1653/1750 train_time:164098ms step_avg:99.27ms
step:1654/1750 train_time:164199ms step_avg:99.27ms
step:1655/1750 train_time:164301ms step_avg:99.28ms
step:1656/1750 train_time:164404ms step_avg:99.28ms
step:1657/1750 train_time:164505ms step_avg:99.28ms
step:1658/1750 train_time:164607ms step_avg:99.28ms
step:1659/1750 train_time:164712ms step_avg:99.28ms
step:1660/1750 train_time:164813ms step_avg:99.28ms
step:1661/1750 train_time:164917ms step_avg:99.29ms
step:1662/1750 train_time:165020ms step_avg:99.29ms
step:1663/1750 train_time:165122ms step_avg:99.29ms
step:1664/1750 train_time:165224ms step_avg:99.29ms
step:1665/1750 train_time:165329ms step_avg:99.30ms
step:1666/1750 train_time:165431ms step_avg:99.30ms
step:1667/1750 train_time:165532ms step_avg:99.30ms
step:1668/1750 train_time:165635ms step_avg:99.30ms
step:1669/1750 train_time:165737ms step_avg:99.30ms
step:1670/1750 train_time:165838ms step_avg:99.30ms
step:1671/1750 train_time:165940ms step_avg:99.31ms
step:1672/1750 train_time:166042ms step_avg:99.31ms
step:1673/1750 train_time:166143ms step_avg:99.31ms
step:1674/1750 train_time:166246ms step_avg:99.31ms
step:1675/1750 train_time:166349ms step_avg:99.31ms
step:1676/1750 train_time:166453ms step_avg:99.32ms
step:1677/1750 train_time:166553ms step_avg:99.32ms
step:1678/1750 train_time:166655ms step_avg:99.32ms
step:1679/1750 train_time:166758ms step_avg:99.32ms
step:1680/1750 train_time:166859ms step_avg:99.32ms
step:1681/1750 train_time:166961ms step_avg:99.32ms
step:1682/1750 train_time:167065ms step_avg:99.33ms
step:1683/1750 train_time:167168ms step_avg:99.33ms
step:1684/1750 train_time:167270ms step_avg:99.33ms
step:1685/1750 train_time:167372ms step_avg:99.33ms
step:1686/1750 train_time:167473ms step_avg:99.33ms
step:1687/1750 train_time:167575ms step_avg:99.33ms
step:1688/1750 train_time:167678ms step_avg:99.34ms
step:1689/1750 train_time:167779ms step_avg:99.34ms
step:1690/1750 train_time:167881ms step_avg:99.34ms
step:1691/1750 train_time:167983ms step_avg:99.34ms
step:1692/1750 train_time:168087ms step_avg:99.34ms
step:1693/1750 train_time:168191ms step_avg:99.34ms
step:1694/1750 train_time:168295ms step_avg:99.35ms
step:1695/1750 train_time:168398ms step_avg:99.35ms
step:1696/1750 train_time:168500ms step_avg:99.35ms
step:1697/1750 train_time:168604ms step_avg:99.35ms
step:1698/1750 train_time:168708ms step_avg:99.36ms
step:1699/1750 train_time:168809ms step_avg:99.36ms
step:1700/1750 train_time:168912ms step_avg:99.36ms
step:1701/1750 train_time:169014ms step_avg:99.36ms
step:1702/1750 train_time:169118ms step_avg:99.36ms
step:1703/1750 train_time:169220ms step_avg:99.37ms
step:1704/1750 train_time:169323ms step_avg:99.37ms
step:1705/1750 train_time:169427ms step_avg:99.37ms
step:1706/1750 train_time:169529ms step_avg:99.37ms
step:1707/1750 train_time:169632ms step_avg:99.37ms
step:1708/1750 train_time:169736ms step_avg:99.38ms
step:1709/1750 train_time:169838ms step_avg:99.38ms
step:1710/1750 train_time:169940ms step_avg:99.38ms
step:1711/1750 train_time:170044ms step_avg:99.38ms
step:1712/1750 train_time:170147ms step_avg:99.39ms
step:1713/1750 train_time:170250ms step_avg:99.39ms
step:1714/1750 train_time:170353ms step_avg:99.39ms
step:1715/1750 train_time:170459ms step_avg:99.39ms
step:1716/1750 train_time:170560ms step_avg:99.39ms
step:1717/1750 train_time:170663ms step_avg:99.40ms
step:1718/1750 train_time:170767ms step_avg:99.40ms
step:1719/1750 train_time:170873ms step_avg:99.40ms
step:1720/1750 train_time:170975ms step_avg:99.40ms
step:1721/1750 train_time:171078ms step_avg:99.41ms
step:1722/1750 train_time:171181ms step_avg:99.41ms
step:1723/1750 train_time:171284ms step_avg:99.41ms
step:1724/1750 train_time:171390ms step_avg:99.41ms
step:1725/1750 train_time:171493ms step_avg:99.42ms
step:1726/1750 train_time:171596ms step_avg:99.42ms
step:1727/1750 train_time:171698ms step_avg:99.42ms
step:1728/1750 train_time:171801ms step_avg:99.42ms
step:1729/1750 train_time:171905ms step_avg:99.42ms
step:1730/1750 train_time:172008ms step_avg:99.43ms
step:1731/1750 train_time:172111ms step_avg:99.43ms
step:1732/1750 train_time:172214ms step_avg:99.43ms
step:1733/1750 train_time:172317ms step_avg:99.43ms
step:1734/1750 train_time:172422ms step_avg:99.44ms
step:1735/1750 train_time:172524ms step_avg:99.44ms
step:1736/1750 train_time:172626ms step_avg:99.44ms
step:1737/1750 train_time:172729ms step_avg:99.44ms
step:1738/1750 train_time:172832ms step_avg:99.44ms
step:1739/1750 train_time:172934ms step_avg:99.44ms
step:1740/1750 train_time:173036ms step_avg:99.45ms
step:1741/1750 train_time:173141ms step_avg:99.45ms
step:1742/1750 train_time:173245ms step_avg:99.45ms
step:1743/1750 train_time:173348ms step_avg:99.45ms
step:1744/1750 train_time:173451ms step_avg:99.46ms
step:1745/1750 train_time:173554ms step_avg:99.46ms
step:1746/1750 train_time:173656ms step_avg:99.46ms
step:1747/1750 train_time:173759ms step_avg:99.46ms
step:1748/1750 train_time:173862ms step_avg:99.46ms
step:1749/1750 train_time:173965ms step_avg:99.47ms
step:1750/1750 train_time:174069ms step_avg:99.47ms
step:1750/1750 val_loss:3.2825 train_time:174159ms step_avg:99.52ms
peak memory allocated: 33278 MiB reserved: 49134 MiB
